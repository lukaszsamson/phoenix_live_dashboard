/*! For license information please see app.dev.js.LICENSE.txt */
!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){var i,r;void 0===(r="function"==typeof(i=function(){var e,t,n={version:"0.2.0"},i=n.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function r(e,t,n){return e<t?t:e>n?n:e}function o(e){return 100*(-1+e)}n.configure=function(e){var t,n;for(t in e)void 0!==(n=e[t])&&e.hasOwnProperty(t)&&(i[t]=n);return this},n.status=null,n.set=function(e){var t=n.isStarted();e=r(e,i.minimum,1),n.status=1===e?null:e;var u=n.render(!t),c=u.querySelector(i.barSelector),l=i.speed,h=i.easing;return u.offsetWidth,a((function(t){""===i.positionUsing&&(i.positionUsing=n.getPositioningCSS()),s(c,function(e,t,n){var r;return(r="translate3d"===i.positionUsing?{transform:"translate3d("+o(e)+"%,0,0)"}:"translate"===i.positionUsing?{transform:"translate("+o(e)+"%,0)"}:{"margin-left":o(e)+"%"}).transition="all "+t+"ms "+n,r}(e,l,h)),1===e?(s(u,{transition:"none",opacity:1}),u.offsetWidth,setTimeout((function(){s(u,{transition:"all "+l+"ms linear",opacity:0}),setTimeout((function(){n.remove(),t()}),l)}),l)):setTimeout(t,l)})),this},n.isStarted=function(){return"number"==typeof n.status},n.start=function(){n.status||n.set(0);var e=function(){setTimeout((function(){n.status&&(n.trickle(),e())}),i.trickleSpeed)};return i.trickle&&e(),this},n.done=function(e){return e||n.status?n.inc(.3+.5*Math.random()).set(1):this},n.inc=function(e){var t=n.status;return t?("number"!=typeof e&&(e=(1-t)*r(Math.random()*t,.1,.95)),t=r(t+e,0,.994),n.set(t)):n.start()},n.trickle=function(){return n.inc(Math.random()*i.trickleRate)},e=0,t=0,n.promise=function(i){return i&&"resolved"!==i.state()?(0===t&&n.start(),e++,t++,i.always((function(){0==--t?(e=0,n.done()):n.set((e-t)/e)})),this):this},n.render=function(e){if(n.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var t=document.createElement("div");t.id="nprogress",t.innerHTML=i.template;var r,a=t.querySelector(i.barSelector),u=e?"-100":o(n.status||0),l=document.querySelector(i.parent);return s(a,{transition:"all 0 linear",transform:"translate3d("+u+"%,0,0)"}),i.showSpinner||(r=t.querySelector(i.spinnerSelector))&&f(r),l!=document.body&&c(l,"nprogress-custom-parent"),l.appendChild(t),t},n.remove=function(){l(document.documentElement,"nprogress-busy"),l(document.querySelector(i.parent),"nprogress-custom-parent");var e=document.getElementById("nprogress");e&&f(e)},n.isRendered=function(){return!!document.getElementById("nprogress")},n.getPositioningCSS=function(){var e=document.body.style,t="WebkitTransform"in e?"Webkit":"MozTransform"in e?"Moz":"msTransform"in e?"ms":"OTransform"in e?"O":"";return t+"Perspective"in e?"translate3d":t+"Transform"in e?"translate":"margin"};var a=function(){var e=[];function t(){var n=e.shift();n&&n(t)}return function(n){e.push(n),1==e.length&&t()}}(),s=function(){var e=["Webkit","O","Moz","ms"],t={};function n(n){return n=n.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(e,t){return t.toUpperCase()})),t[n]||(t[n]=function(t){var n=document.body.style;if(t in n)return t;for(var i,r=e.length,o=t.charAt(0).toUpperCase()+t.slice(1);r--;)if((i=e[r]+o)in n)return i;return t}(n))}function i(e,t,i){t=n(t),e.style[t]=i}return function(e,t){var n,r,o=arguments;if(2==o.length)for(n in t)void 0!==(r=t[n])&&t.hasOwnProperty(n)&&i(e,n,r);else i(e,o[1],o[2])}}();function u(e,t){return("string"==typeof e?e:h(e)).indexOf(" "+t+" ")>=0}function c(e,t){var n=h(e),i=n+t;u(n,t)||(e.className=i.substring(1))}function l(e,t){var n,i=h(e);u(e,t)&&(n=i.replace(" "+t+" "," "),e.className=n.substring(1,n.length-1))}function h(e){return(" "+(e.className||"")+" ").replace(/\s+/gi," ")}function f(e){e&&e.parentNode&&e.parentNode.removeChild(e)}return n})?i.call(t,n,t,e):i)||(e.exports=r)},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){(function(e){var n,i,r,o;function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}o=function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==a(e)&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){(function(t){e.exports=t.Phoenix=n(2)}).call(this,n(1))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==("undefined"==typeof window?"undefined":a(window))&&(n=window)}e.exports=n},function(e,t,n){"use strict";function i(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||s(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e){return(r="function"==typeof Symbol&&"symbol"==a(Symbol.iterator)?function(e){return a(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":a(e)})(e)}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{i||null==s.return||s.return()}finally{if(r)throw o}}return n}}(e,t)||s(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){if(e){if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(n):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?u(e,t):void 0}}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function h(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),e}n.r(t),n.d(t,"Channel",(function(){return L})),n.d(t,"Serializer",(function(){return _})),n.d(t,"Socket",(function(){return M})),n.d(t,"LongPoll",(function(){return j})),n.d(t,"Ajax",(function(){return D})),n.d(t,"Presence",(function(){return O}));var f="undefined"!=typeof self?self:null,d="undefined"!=typeof window?window:null,p=f||d||void 0,v="closed",m="errored",g="joined",y="joining",b="leaving",k="phx_close",w="phx_error",x="phx_join",S="phx_reply",C="phx_leave",E=[k,w,x,S,C],A="websocket",T=function(e){return"function"==typeof e?e:function(){return e}},P=function(){function e(t,n,i,r){c(this,e),this.channel=t,this.event=n,this.payload=i||function(){return{}},this.receivedResp=null,this.timeout=r,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}return h(e,[{key:"resend",value:function(e){this.timeout=e,this.reset(),this.send()}},{key:"send",value:function(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}},{key:"receive",value:function(e,t){return this.hasReceived(e)&&t(this.receivedResp.response),this.recHooks.push({status:e,callback:t}),this}},{key:"reset",value:function(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}},{key:"matchReceive",value:function(e){var t=e.status,n=e.response;e.ref,this.recHooks.filter((function(e){return e.status===t})).forEach((function(e){return e.callback(n)}))}},{key:"cancelRefEvent",value:function(){this.refEvent&&this.channel.off(this.refEvent)}},{key:"cancelTimeout",value:function(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}},{key:"startTimeout",value:function(){var e=this;this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,(function(t){e.cancelRefEvent(),e.cancelTimeout(),e.receivedResp=t,e.matchReceive(t)})),this.timeoutTimer=setTimeout((function(){e.trigger("timeout",{})}),this.timeout)}},{key:"hasReceived",value:function(e){return this.receivedResp&&this.receivedResp.status===e}},{key:"trigger",value:function(e,t){this.channel.trigger(this.refEvent,{status:e,response:t})}}]),e}(),L=function(){function e(t,n,i){var r=this;c(this,e),this.state=v,this.topic=t,this.params=T(n||{}),this.socket=i,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new P(this,x,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new R((function(){r.socket.isConnected()&&r.rejoin()}),this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError((function(){return r.rejoinTimer.reset()}))),this.stateChangeRefs.push(this.socket.onOpen((function(){r.rejoinTimer.reset(),r.isErrored()&&r.rejoin()}))),this.joinPush.receive("ok",(function(){r.state=g,r.rejoinTimer.reset(),r.pushBuffer.forEach((function(e){return e.send()})),r.pushBuffer=[]})),this.joinPush.receive("error",(function(){r.state=m,r.socket.isConnected()&&r.rejoinTimer.scheduleTimeout()})),this.onClose((function(){r.rejoinTimer.reset(),r.socket.hasLogger()&&r.socket.log("channel","close ".concat(r.topic," ").concat(r.joinRef())),r.state=v,r.socket.remove(r)})),this.onError((function(e){r.socket.hasLogger()&&r.socket.log("channel","error ".concat(r.topic),e),r.isJoining()&&r.joinPush.reset(),r.state=m,r.socket.isConnected()&&r.rejoinTimer.scheduleTimeout()})),this.joinPush.receive("timeout",(function(){r.socket.hasLogger()&&r.socket.log("channel","timeout ".concat(r.topic," (").concat(r.joinRef(),")"),r.joinPush.timeout),new P(r,C,T({}),r.timeout).send(),r.state=m,r.joinPush.reset(),r.socket.isConnected()&&r.rejoinTimer.scheduleTimeout()})),this.on(S,(function(e,t){r.trigger(r.replyEventName(t),e)}))}return h(e,[{key:"join",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=e,this.joinedOnce=!0,this.rejoin(),this.joinPush}},{key:"onClose",value:function(e){this.on(k,e)}},{key:"onError",value:function(e){return this.on(w,(function(t){return e(t)}))}},{key:"on",value:function(e,t){var n=this.bindingRef++;return this.bindings.push({event:e,ref:n,callback:t}),n}},{key:"off",value:function(e,t){this.bindings=this.bindings.filter((function(n){return!(n.event===e&&(void 0===t||t===n.ref))}))}},{key:"canPush",value:function(){return this.socket.isConnected()&&this.isJoined()}},{key:"push",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.timeout;if(!this.joinedOnce)throw new Error("tried to push '".concat(e,"' to '").concat(this.topic,"' before joining. Use channel.join() before pushing events"));var i=new P(this,e,(function(){return t}),n);return this.canPush()?i.send():(i.startTimeout(),this.pushBuffer.push(i)),i}},{key:"leave",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=b;var n=function(){e.socket.hasLogger()&&e.socket.log("channel","leave ".concat(e.topic)),e.trigger(k,"leave")},i=new P(this,C,T({}),t);return i.receive("ok",(function(){return n()})).receive("timeout",(function(){return n()})),i.send(),this.canPush()||i.trigger("ok",{}),i}},{key:"onMessage",value:function(e,t,n){return t}},{key:"isLifecycleEvent",value:function(e){return E.indexOf(e)>=0}},{key:"isMember",value:function(e,t,n,i){return!(this.topic!==e||i&&i!==this.joinRef()&&this.isLifecycleEvent(t)&&(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:e,event:t,payload:n,joinRef:i}),1))}},{key:"joinRef",value:function(){return this.joinPush.ref}},{key:"rejoin",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.timeout;this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=y,this.joinPush.resend(e))}},{key:"trigger",value:function(e,t,n,i){var r=this.onMessage(e,t,n,i);if(t&&!r)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");for(var o=this.bindings.filter((function(t){return t.event===e})),a=0;a<o.length;a++)o[a].callback(r,n,i||this.joinRef())}},{key:"replyEventName",value:function(e){return"chan_reply_".concat(e)}},{key:"isClosed",value:function(){return this.state===v}},{key:"isErrored",value:function(){return this.state===m}},{key:"isJoined",value:function(){return this.state===g}},{key:"isJoining",value:function(){return this.state===y}},{key:"isLeaving",value:function(){return this.state===b}}]),e}(),_={encode:function(e,t){var n=[e.join_ref,e.ref,e.topic,e.event,e.payload];return t(JSON.stringify(n))},decode:function(e,t){var n=o(JSON.parse(e),5);return t({join_ref:n[0],ref:n[1],topic:n[2],event:n[3],payload:n[4]})}},M=function(){function e(t){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};c(this,e),this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=i.timeout||1e4,this.transport=i.transport||p.WebSocket||j,this.defaultEncoder=_.encode,this.defaultDecoder=_.decode,this.closeWasClean=!1,this.unloaded=!1,this.binaryType=i.binaryType||"arraybuffer",this.transport!==j?(this.encode=i.encode||this.defaultEncoder,this.decode=i.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder),d&&d.addEventListener&&d.addEventListener("unload",(function(e){n.conn&&(n.unloaded=!0,n.abnormalClose("unloaded"))})),this.heartbeatIntervalMs=i.heartbeatIntervalMs||3e4,this.rejoinAfterMs=function(e){return i.rejoinAfterMs?i.rejoinAfterMs(e):[1e3,2e3,5e3][e-1]||1e4},this.reconnectAfterMs=function(e){return n.unloaded?100:i.reconnectAfterMs?i.reconnectAfterMs(e):[10,50,100,150,200,250,500,1e3,2e3][e-1]||5e3},this.logger=i.logger||null,this.longpollerTimeout=i.longpollerTimeout||2e4,this.params=T(i.params||{}),this.endPoint="".concat(t,"/").concat(A),this.vsn=i.vsn||"2.0.0",this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new R((function(){n.teardown((function(){return n.connect()}))}),this.reconnectAfterMs)}return h(e,[{key:"protocol",value:function(){return location.protocol.match(/^https/)?"wss":"ws"}},{key:"endPointURL",value:function(){var e=D.appendParams(D.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return"/"!==e.charAt(0)?e:"/"===e.charAt(1)?"".concat(this.protocol(),":").concat(e):"".concat(this.protocol(),"://").concat(location.host).concat(e)}},{key:"disconnect",value:function(e,t,n){this.closeWasClean=!0,this.reconnectTimer.reset(),this.teardown(e,t,n)}},{key:"connect",value:function(e){var t=this;e&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=T(e)),this.conn||(this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=function(){return t.onConnOpen()},this.conn.onerror=function(e){return t.onConnError(e)},this.conn.onmessage=function(e){return t.onConnMessage(e)},this.conn.onclose=function(e){return t.onConnClose(e)})}},{key:"log",value:function(e,t,n){this.logger(e,t,n)}},{key:"hasLogger",value:function(){return null!==this.logger}},{key:"onOpen",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.open.push([t,e]),t}},{key:"onClose",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.close.push([t,e]),t}},{key:"onError",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.error.push([t,e]),t}},{key:"onMessage",value:function(e){var t=this.makeRef();return this.stateChangeCallbacks.message.push([t,e]),t}},{key:"onConnOpen",value:function(){this.hasLogger()&&this.log("transport","connected to ".concat(this.endPointURL())),this.unloaded=!1,this.closeWasClean=!1,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach((function(e){return(0,o(e,2)[1])()}))}},{key:"resetHeartbeat",value:function(){var e=this;this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,clearInterval(this.heartbeatTimer),this.heartbeatTimer=setInterval((function(){return e.sendHeartbeat()}),this.heartbeatIntervalMs))}},{key:"teardown",value:function(e,t,n){var i=this;if(!this.conn)return e&&e();this.waitForBufferDone((function(){i.conn&&(t?i.conn.close(t,n||""):i.conn.close()),i.waitForSocketClosed((function(){i.conn&&(i.conn.onclose=function(){},i.conn=null),e&&e()}))}))}},{key:"waitForBufferDone",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;5!==n&&this.conn&&this.conn.bufferedAmount?setTimeout((function(){t.waitForBufferDone(e,n+1)}),150*n):e()}},{key:"waitForSocketClosed",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;5!==n&&this.conn&&3!==this.conn.readyState?setTimeout((function(){t.waitForSocketClosed(e,n+1)}),150*n):e()}},{key:"onConnClose",value:function(e){this.hasLogger()&&this.log("transport","close",e),this.triggerChanError(),clearInterval(this.heartbeatTimer),this.closeWasClean||this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach((function(t){return(0,o(t,2)[1])(e)}))}},{key:"onConnError",value:function(e){this.hasLogger()&&this.log("transport",e),this.triggerChanError(),this.stateChangeCallbacks.error.forEach((function(t){return(0,o(t,2)[1])(e)}))}},{key:"triggerChanError",value:function(){this.channels.forEach((function(e){e.isErrored()||e.isLeaving()||e.isClosed()||e.trigger(w)}))}},{key:"connectionState",value:function(){switch(this.conn&&this.conn.readyState){case 0:return"connecting";case 1:return"open";case 2:return"closing";default:return"closed"}}},{key:"isConnected",value:function(){return"open"===this.connectionState()}},{key:"remove",value:function(e){this.off(e.stateChangeRefs),this.channels=this.channels.filter((function(t){return t.joinRef()!==e.joinRef()}))}},{key:"off",value:function(e){for(var t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter((function(t){var n=o(t,1)[0];return-1===e.indexOf(n)}))}},{key:"channel",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=new L(e,t,this);return this.channels.push(n),n}},{key:"push",value:function(e){var t=this;if(this.hasLogger()){var n=e.topic,i=e.event,r=e.payload,o=e.ref,a=e.join_ref;this.log("push","".concat(n," ").concat(i," (").concat(a,", ").concat(o,")"),r)}this.isConnected()?this.encode(e,(function(e){return t.conn.send(e)})):this.sendBuffer.push((function(){return t.encode(e,(function(e){return t.conn.send(e)}))}))}},{key:"makeRef",value:function(){var e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}},{key:"sendHeartbeat",value:function(){if(this.isConnected()){if(this.pendingHeartbeatRef)return this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),void this.abnormalClose("heartbeat timeout");this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef})}}},{key:"abnormalClose",value:function(e){this.closeWasClean=!1,this.conn.close(1e3,e)}},{key:"flushSendBuffer",value:function(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach((function(e){return e()})),this.sendBuffer=[])}},{key:"onConnMessage",value:function(e){var t=this;this.decode(e.data,(function(e){var n=e.topic,i=e.event,r=e.payload,a=e.ref,s=e.join_ref;a&&a===t.pendingHeartbeatRef&&(t.pendingHeartbeatRef=null),t.hasLogger()&&t.log("receive","".concat(r.status||""," ").concat(n," ").concat(i," ").concat(a&&"("+a+")"||""),r);for(var u=0;u<t.channels.length;u++){var c=t.channels[u];c.isMember(n,i,r,s)&&c.trigger(i,r,a,s)}for(var l=0;l<t.stateChangeCallbacks.message.length;l++)(0,o(t.stateChangeCallbacks.message[l],2)[1])(e)}))}},{key:"leaveOpenTopic",value:function(e){var t=this.channels.find((function(t){return t.topic===e&&(t.isJoined()||t.isJoining())}));t&&(this.hasLogger()&&this.log("transport",'leaving duplicate topic "'.concat(e,'"')),t.leave())}}]),e}(),j=function(){function e(t){c(this,e),this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(t),this.readyState=0,this.poll()}return h(e,[{key:"normalizeEndpoint",value:function(e){return e.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+A),"$1/longpoll")}},{key:"endpointURL",value:function(){return D.appendParams(this.pollEndpoint,{token:this.token})}},{key:"closeAndRetry",value:function(){this.close(),this.readyState=0}},{key:"ontimeout",value:function(){this.onerror("timeout"),this.closeAndRetry()}},{key:"poll",value:function(){var e=this;1!==this.readyState&&0!==this.readyState||D.request("GET",this.endpointURL(),"application/json",null,this.timeout,this.ontimeout.bind(this),(function(t){if(t){var n=t.status,i=t.token,r=t.messages;e.token=i}else n=0;switch(n){case 200:r.forEach((function(t){return e.onmessage({data:t})})),e.poll();break;case 204:e.poll();break;case 410:e.readyState=1,e.onopen(),e.poll();break;case 403:e.onerror(),e.close();break;case 0:case 500:e.onerror(),e.closeAndRetry();break;default:throw new Error("unhandled poll status ".concat(n))}}))}},{key:"send",value:function(e){var t=this;D.request("POST",this.endpointURL(),"application/json",e,this.timeout,this.onerror.bind(this,"timeout"),(function(e){e&&200===e.status||(t.onerror(e&&e.status),t.closeAndRetry())}))}},{key:"close",value:function(e,t){this.readyState=3,this.onclose()}}]),e}(),D=function(){function e(){c(this,e)}return h(e,null,[{key:"request",value:function(e,t,n,i,r,o,a){if(p.XDomainRequest){var s=new XDomainRequest;this.xdomainRequest(s,e,t,i,r,o,a)}else{var u=new p.XMLHttpRequest;this.xhrRequest(u,e,t,n,i,r,o,a)}}},{key:"xdomainRequest",value:function(e,t,n,i,r,o,a){var s=this;e.timeout=r,e.open(t,n),e.onload=function(){var t=s.parseJSON(e.responseText);a&&a(t)},o&&(e.ontimeout=o),e.onprogress=function(){},e.send(i)}},{key:"xhrRequest",value:function(e,t,n,i,r,o,a,s){var u=this;e.open(t,n,!0),e.timeout=o,e.setRequestHeader("Content-Type",i),e.onerror=function(){s&&s(null)},e.onreadystatechange=function(){if(e.readyState===u.states.complete&&s){var t=u.parseJSON(e.responseText);s(t)}},a&&(e.ontimeout=a),e.send(r)}},{key:"parseJSON",value:function(e){if(!e||""===e)return null;try{return JSON.parse(e)}catch(t){return console&&console.log("failed to parse JSON response",e),null}}},{key:"serialize",value:function(e,t){var n=[];for(var i in e)if(e.hasOwnProperty(i)){var o=t?"".concat(t,"[").concat(i,"]"):i,a=e[i];"object"===r(a)?n.push(this.serialize(a,o)):n.push(encodeURIComponent(o)+"="+encodeURIComponent(a))}return n.join("&")}},{key:"appendParams",value:function(e,t){if(0===Object.keys(t).length)return e;var n=e.match(/\?/)?"&":"?";return"".concat(e).concat(n).concat(this.serialize(t))}}]),e}();D.states={complete:4};var O=function(){function e(t){var n=this,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};c(this,e);var r=i.events||{state:"presence_state",diff:"presence_diff"};this.state={},this.pendingDiffs=[],this.channel=t,this.joinRef=null,this.caller={onJoin:function(){},onLeave:function(){},onSync:function(){}},this.channel.on(r.state,(function(t){var i=n.caller,r=i.onJoin,o=i.onLeave,a=i.onSync;n.joinRef=n.channel.joinRef(),n.state=e.syncState(n.state,t,r,o),n.pendingDiffs.forEach((function(t){n.state=e.syncDiff(n.state,t,r,o)})),n.pendingDiffs=[],a()})),this.channel.on(r.diff,(function(t){var i=n.caller,r=i.onJoin,o=i.onLeave,a=i.onSync;n.inPendingSyncState()?n.pendingDiffs.push(t):(n.state=e.syncDiff(n.state,t,r,o),a())}))}return h(e,[{key:"onJoin",value:function(e){this.caller.onJoin=e}},{key:"onLeave",value:function(e){this.caller.onLeave=e}},{key:"onSync",value:function(e){this.caller.onSync=e}},{key:"list",value:function(t){return e.list(this.state,t)}},{key:"inPendingSyncState",value:function(){return!this.joinRef||this.joinRef!==this.channel.joinRef()}}],[{key:"syncState",value:function(e,t,n,i){var r=this,o=this.clone(e),a={},s={};return this.map(o,(function(e,n){t[e]||(s[e]=n)})),this.map(t,(function(e,t){var n=o[e];if(n){var i=t.metas.map((function(e){return e.phx_ref})),u=n.metas.map((function(e){return e.phx_ref})),c=t.metas.filter((function(e){return u.indexOf(e.phx_ref)<0})),l=n.metas.filter((function(e){return i.indexOf(e.phx_ref)<0}));c.length>0&&(a[e]=t,a[e].metas=c),l.length>0&&(s[e]=r.clone(n),s[e].metas=l)}else a[e]=t})),this.syncDiff(o,{joins:a,leaves:s},n,i)}},{key:"syncDiff",value:function(e,t,n,r){var o=t.joins,a=t.leaves,s=this.clone(e);return n||(n=function(){}),r||(r=function(){}),this.map(o,(function(e,t){var r=s[e];if(s[e]=t,r){var o,a=s[e].metas.map((function(e){return e.phx_ref})),u=r.metas.filter((function(e){return a.indexOf(e.phx_ref)<0}));(o=s[e].metas).unshift.apply(o,i(u))}n(e,r,t)})),this.map(a,(function(e,t){var n=s[e];if(n){var i=t.metas.map((function(e){return e.phx_ref}));n.metas=n.metas.filter((function(e){return i.indexOf(e.phx_ref)<0})),r(e,n,t),0===n.metas.length&&delete s[e]}})),s}},{key:"list",value:function(e,t){return t||(t=function(e,t){return t}),this.map(e,(function(e,n){return t(e,n)}))}},{key:"map",value:function(e,t){return Object.getOwnPropertyNames(e).map((function(n){return t(n,e[n])}))}},{key:"clone",value:function(e){return JSON.parse(JSON.stringify(e))}}]),e}(),R=function(){function e(t,n){c(this,e),this.callback=t,this.timerCalc=n,this.timer=null,this.tries=0}return h(e,[{key:"reset",value:function(){this.tries=0,clearTimeout(this.timer)}},{key:"scheduleTimeout",value:function(){var e=this;clearTimeout(this.timer),this.timer=setTimeout((function(){e.tries=e.tries+1,e.callback()}),this.timerCalc(this.tries+1))}}]),e}()}])},"object"==a(t)&&"object"==a(e)?e.exports=o():(i=[],void 0===(r="function"==typeof(n=o)?n.apply(t,i):n)||(e.exports=r))}).call(this,n(1)(e))},function(e,t,n){(function(e){var n,i,r,o;function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}o=function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";n.r(t);var i,r="undefined"==typeof document?void 0:document,o=!!r&&"content"in r.createElement("template"),s=!!r&&r.createRange&&"createContextualFragment"in r.createRange();function u(e){return e=e.trim(),o?function(e){var t=r.createElement("template");return t.innerHTML=e,t.content.childNodes[0]}(e):s?function(e){return i||(i=r.createRange()).selectNode(r.body),i.createContextualFragment(e).childNodes[0]}(e):function(e){var t=r.createElement("body");return t.innerHTML=e,t.childNodes[0]}(e)}function c(e,t){var n,i,r=e.nodeName,o=t.nodeName;return r===o||(n=r.charCodeAt(0),i=o.charCodeAt(0),n<=90&&i>=97?r===o.toUpperCase():i<=90&&n>=97&&o===r.toUpperCase())}function l(e,t,n){e[n]!==t[n]&&(e[n]=t[n],e[n]?e.setAttribute(n,""):e.removeAttribute(n))}var h={OPTION:function(e,t){var n=e.parentNode;if(n){var i=n.nodeName.toUpperCase();"OPTGROUP"===i&&(i=(n=n.parentNode)&&n.nodeName.toUpperCase()),"SELECT"!==i||n.hasAttribute("multiple")||(e.hasAttribute("selected")&&!t.selected&&(e.setAttribute("selected","selected"),e.removeAttribute("selected")),n.selectedIndex=-1)}l(e,t,"selected")},INPUT:function(e,t){l(e,t,"checked"),l(e,t,"disabled"),e.value!==t.value&&(e.value=t.value),t.hasAttribute("value")||e.removeAttribute("value")},TEXTAREA:function(e,t){var n=t.value;e.value!==n&&(e.value=n);var i=e.firstChild;if(i){var r=i.nodeValue;if(r==n||!n&&r==e.placeholder)return;i.nodeValue=n}},SELECT:function(e,t){if(!t.hasAttribute("multiple")){for(var n,i,r=-1,o=0,a=e.firstChild;a;)if("OPTGROUP"===(i=a.nodeName&&a.nodeName.toUpperCase()))a=(n=a).firstChild;else{if("OPTION"===i){if(a.hasAttribute("selected")){r=o;break}o++}!(a=a.nextSibling)&&n&&(a=n.nextSibling,n=null)}e.selectedIndex=r}}};function f(){}function d(e){if(e)return e.getAttribute&&e.getAttribute("id")||e.id}var p=function(e){return function(t,n,i){if(i||(i={}),"string"==typeof n)if("#document"===t.nodeName||"HTML"===t.nodeName||"BODY"===t.nodeName){var o=n;(n=r.createElement("html")).innerHTML=o}else n=u(n);var a=i.getNodeKey||d,s=i.onBeforeNodeAdded||f,l=i.onNodeAdded||f,p=i.onBeforeElUpdated||f,v=i.onElUpdated||f,m=i.onBeforeNodeDiscarded||f,g=i.onNodeDiscarded||f,y=i.onBeforeElChildrenUpdated||f,b=!0===i.childrenOnly,k=Object.create(null),w=[];function x(e){w.push(e)}function S(e,t,n){!1!==m(e)&&(t&&t.removeChild(e),g(e),function e(t,n){if(1===t.nodeType)for(var i=t.firstChild;i;){var r=void 0;n&&(r=a(i))?x(r):(g(i),i.firstChild&&e(i,n)),i=i.nextSibling}}(e,n))}function C(e){l(e);for(var t=e.firstChild;t;){var n=t.nextSibling,i=a(t);if(i){var r=k[i];r&&c(t,r)?(t.parentNode.replaceChild(r,t),E(r,t)):C(t)}else C(t);t=n}}function E(t,n,i){var o=a(n);if(o&&delete k[o],!i){if(!1===p(t,n))return;if(e(t,n),v(t),!1===y(t,n))return}"TEXTAREA"!==t.nodeName?function(e,t){var n,i,o,u,l,f=t.firstChild,d=e.firstChild;e:for(;f;){for(u=f.nextSibling,n=a(f);d;){if(o=d.nextSibling,f.isSameNode&&f.isSameNode(d)){f=u,d=o;continue e}i=a(d);var p=d.nodeType,v=void 0;if(p===f.nodeType&&(1===p?(n?n!==i&&((l=k[n])?o===l?v=!1:(e.insertBefore(l,d),i?x(i):S(d,e,!0),d=l):v=!1):i&&(v=!1),(v=!1!==v&&c(d,f))&&E(d,f)):3!==p&&8!=p||(v=!0,d.nodeValue!==f.nodeValue&&(d.nodeValue=f.nodeValue))),v){f=u,d=o;continue e}i?x(i):S(d,e,!0),d=o}if(n&&(l=k[n])&&c(l,f))e.appendChild(l),E(l,f);else{var m=s(f);!1!==m&&(m&&(f=m),f.actualize&&(f=f.actualize(e.ownerDocument||r)),e.appendChild(f),C(f))}f=u,d=o}!function(e,t,n){for(;t;){var i=t.nextSibling;(n=a(t))?x(n):S(t,e,!0),t=i}}(e,d,i);var g=h[e.nodeName];g&&g(e,t)}(t,n):h.TEXTAREA(t,n)}!function e(t){if(1===t.nodeType||11===t.nodeType)for(var n=t.firstChild;n;){var i=a(n);i&&(k[i]=n),e(n),n=n.nextSibling}}(t);var A=t,T=A.nodeType,P=n.nodeType;if(!b)if(1===T)1===P?c(t,n)||(g(t),A=function(e,t){for(var n=e.firstChild;n;){var i=n.nextSibling;t.appendChild(n),n=i}return t}(t,function(e,t){return t&&"http://www.w3.org/1999/xhtml"!==t?r.createElementNS(t,e):r.createElement(e)}(n.nodeName,n.namespaceURI))):A=n;else if(3===T||8===T){if(P===T)return A.nodeValue!==n.nodeValue&&(A.nodeValue=n.nodeValue),A;A=n}if(A===n)g(t);else{if(n.isSameNode&&n.isSameNode(A))return;if(E(A,n,b),w)for(var L=0,_=w.length;L<_;L++){var M=k[w[L]];M&&S(M,M.parentNode,!1)}}return!b&&A!==t&&t.parentNode&&(A.actualize&&(A=A.actualize(t.ownerDocument||r)),t.parentNode.replaceChild(A,t)),A}}((function(e,t){var n,i,r,o,a=t.attributes;if(11!==t.nodeType&&11!==e.nodeType){for(var s=a.length-1;s>=0;s--)i=(n=a[s]).name,r=n.namespaceURI,o=n.value,r?(i=n.localName||i,e.getAttributeNS(r,i)!==o&&("xmlns"===n.prefix&&(i=n.name),e.setAttributeNS(r,i,o))):e.getAttribute(i)!==o&&e.setAttribute(i,o);for(var u=e.attributes,c=u.length-1;c>=0;c--)i=(n=u[c]).name,(r=n.namespaceURI)?(i=n.localName||i,t.hasAttributeNS(r,i)||e.removeAttributeNS(r,i)):t.hasAttribute(i)||e.removeAttribute(i)}}));function v(e){return S(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||C(e)||x()}function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function b(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function k(e,t,n){return t&&b(e.prototype,t),n&&b(e,n),e}function w(e,t){return S(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{i||null==s.return||s.return()}finally{if(r)throw o}}return n}}(e,t)||C(e,t)||x()}function x(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function S(e){if(Array.isArray(e))return e}function C(e,t){if(e){if("string"==typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?E(e,t):void 0}}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function A(e){return(A="function"==typeof Symbol&&"symbol"==a(Symbol.iterator)?function(e){return a(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":a(e)})(e)}n.d(t,"debug",(function(){return H})),n.d(t,"Rendered",(function(){return q})),n.d(t,"LiveSocket",(function(){return z})),n.d(t,"Browser",(function(){return G})),n.d(t,"DOM",(function(){return K})),n.d(t,"View",(function(){return $}));var T=[1e3,3e3],P="data-phx-view",L=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading"],_="data-phx-component",M="data-phx-ref",j="[".concat(P,"]"),D=["text","textarea","number","email","password","search","tel","url","date","time"],O=["checkbox","radio"],R="phx-",I={debounce:300,throttle:300},N=function(e,t){return console.error&&console.error(e,t)},H=function(e,t,n,i){e.liveSocket.isDebugEnabled()&&console.log("".concat(e.id," ").concat(t,": ").concat(n," - "),i)},Y=function(e){return"function"==typeof e?e:function(){return e}},B=function(e){return JSON.parse(JSON.stringify(e))},F=function(e,t,n){do{if(e.matches("[".concat(t,"]")))return e;e=e.parentElement||e.parentNode}while(null!==e&&1===e.nodeType&&!(n&&n.isSameNode(e)||e.matches(j)));return null},J=function(e){return null!==e&&"object"===A(e)&&!(e instanceof Array)},U=function(e){for(var t in e)return!1;return!0},W=function(e,t){return e&&t(e)},V=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=new FormData(e),r=new URLSearchParams,o=function(e){if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(e=C(e))){var t=0,n=function(){};return{s:n,n:function(){return t>=e.length?{done:!0}:{done:!1,value:e[t++]}},e:function(e){throw e},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,r,o=!0,a=!1;return{s:function(){i=e[Symbol.iterator]()},n:function(){var e=i.next();return o=e.done,e},e:function(e){a=!0,r=e},f:function(){try{o||null==i.return||i.return()}finally{if(a)throw r}}}}(i.entries());try{for(o.s();!(t=o.n()).done;){var a=w(t.value,2),s=a[0],u=a[1];r.append(s,u)}}catch(e){o.e(e)}finally{o.f()}for(var c in n)r.append(c,n[c]);return r.toString()},q=function(){function e(t,n){y(this,e),this.viewId=t,this.replaceRendered(n)}return k(e,[{key:"parentViewId",value:function(){return this.viewId}},{key:"toString",value:function(e){return this.recursiveToString(this.rendered,this.rendered.c,e)}},{key:"recursiveToString",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.c||{},n=arguments.length>2?arguments[2]:void 0,i={buffer:"",components:t,onlyCids:n=n?new Set(n):null};return this.toOutputBuffer(e,i),i.buffer}},{key:"componentCIDs",value:function(e){return Object.keys(e.c||{}).map((function(e){return parseInt(e)}))}},{key:"isComponentOnlyDiff",value:function(e){return!!e.c&&0===Object.keys(e).filter((function(e){return"title"!==e&&"c"!==e})).length}},{key:"mergeDiff",value:function(e){!e.c&&this.isNewFingerprint(e)?this.replaceRendered(e):(this.recursiveMerge(this.rendered,e),this.expandStatics(e))}},{key:"expandStatics",value:function(e){if(!U(this.rendered.c))for(var t in e.c){var n=e.c[t].s;if("number"==typeof n){for(;"number"==typeof n;)n=this.rendered.c[n].s;this.rendered.c[t].s=n}}}},{key:"recursiveMerge",value:function(e,t){for(var n in t){var i=t[n],r=e[n];J(i)&&J(r)?(r.d&&!i.d&&delete r.d,this.recursiveMerge(r,i)):e[n]=i}}},{key:"componentToString",value:function(e){return this.recursiveCIDToString(this.rendered.c,e)}},{key:"pruneCIDs",value:function(e){var t=this;e.forEach((function(e){return delete t.rendered.c[e]}))}},{key:"get",value:function(){return this.rendered}},{key:"replaceRendered",value:function(e){this.rendered=e,this.rendered.c=this.rendered.c||{},this.expandStatics(e)}},{key:"isNewFingerprint",value:function(){return!!(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).s}},{key:"toOutputBuffer",value:function(e,t){if(e.d)return this.comprehensionToBuffer(e,t);var n=e.s;t.buffer+=n[0];for(var i=1;i<n.length;i++)this.dynamicToBuffer(e[i-1],t),t.buffer+=n[i]}},{key:"comprehensionToBuffer",value:function(e,t){for(var n=e.d,i=e.s,r=0;r<n.length;r++){var o=n[r];t.buffer+=i[0];for(var a=1;a<i.length;a++)this.dynamicToBuffer(o[a-1],t),t.buffer+=i[a]}}},{key:"dynamicToBuffer",value:function(e,t){"number"==typeof e?t.buffer+=this.recursiveCIDToString(t.components,e,t.onlyCids):J(e)?this.toOutputBuffer(e,t):t.buffer+=e}},{key:"recursiveCIDToString",value:function(e,t,n){var i=this,r=e[t]||N("no component for CID ".concat(t),e),o=document.createElement("template");o.innerHTML=this.recursiveToString(r,e,n);var a=o.content,s=n&&!n.has(t);return Array.from(a.childNodes).forEach((function(e,n){if(e.nodeType===Node.ELEMENT_NODE)e.setAttribute(_,t),e.id||(e.id="".concat(i.parentViewId(),"-").concat(t,"-").concat(n)),s&&(e.setAttribute("data-phx-skip",""),e.innerHTML="");else if(""!==e.nodeValue.trim()){N("only HTML element tags are allowed at the root of components.\n\n"+'got: "'.concat(e.nodeValue.trim(),'"\n\n')+"within:\n",o.innerHTML.trim());var r=document.createElement("span");r.innerText=e.nodeValue,r.setAttribute(_,t),e.replaceWith(r)}else e.remove()})),o.innerHTML}}]),e}(),z=function(){function e(t,n){var i=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(y(this,e),this.unloaded=!1,!n||"Object"===n.constructor.name)throw new Error('\n      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:\n\n          import {Socket} from "phoenix"\n          import {LiveSocket} from "phoenix_live_view"\n          let liveSocket = new LiveSocket("/live", Socket, {...})\n      ');this.socket=new n(t,r),this.bindingPrefix=r.bindingPrefix||R,this.opts=r,this.params=Y(r.params||{}),this.viewLogger=r.viewLogger,this.metadataCallbacks=r.metadata||{},this.defaults=Object.assign(B(I),r.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.linkRef=0,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=B(window.location),this.hooks=r.hooks||{},this.loaderTimeout=r.loaderTimeout||1,this.boundTopLevelEvents=!1,window.addEventListener("unload",(function(e){i.unloaded=!0})),this.socket.onOpen((function(){i.isUnloaded()&&window.location.reload()}))}return k(e,[{key:"isProfileEnabled",value:function(){return"true"===sessionStorage.getItem("phx:live-socket:profiling")}},{key:"isDebugEnabled",value:function(){return"true"===sessionStorage.getItem("phx:live-socket:debug")}},{key:"enableDebug",value:function(){sessionStorage.setItem("phx:live-socket:debug","true")}},{key:"enableProfiling",value:function(){sessionStorage.setItem("phx:live-socket:profiling","true")}},{key:"disableDebug",value:function(){sessionStorage.removeItem("phx:live-socket:debug")}},{key:"disableProfiling",value:function(){sessionStorage.removeItem("phx:live-socket:profiling")}},{key:"enableLatencySim",value:function(e){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),sessionStorage.setItem("phx:live-socket:latency-sim",e)}},{key:"disableLatencySim",value:function(){sessionStorage.removeItem("phx:live-socket:latency-sim")}},{key:"getLatencySim",value:function(){var e=sessionStorage.getItem("phx:live-socket:latency-sim");return e?parseInt(e):null}},{key:"getSocket",value:function(){return this.socket}},{key:"connect",value:function(){var e=this,t=function(){e.joinRootViews()&&(e.bindTopLevelEvents(),e.socket.connect())};["complete","loaded","interactive"].indexOf(document.readyState)>=0?t():document.addEventListener("DOMContentLoaded",(function(){return t()}))}},{key:"disconnect",value:function(e){this.socket.disconnect(e)}},{key:"time",value:function(e,t){if(!this.isProfileEnabled()||!console.time)return t();console.time(e);var n=t();return console.timeEnd(e),n}},{key:"log",value:function(e,t,n){if(this.viewLogger){var i=w(n(),2),r=i[0],o=i[1];this.viewLogger(e,t,r,o)}else if(this.isDebugEnabled()){var a=w(n(),2),s=a[0],u=a[1];H(e,t,s,u)}}},{key:"onChannel",value:function(e,t,n){var i=this;e.on(t,(function(e){var t=i.getLatencySim();t?(console.log("simulating ".concat(t,"ms of latency from server to client")),setTimeout((function(){return n(e)}),t)):n(e)}))}},{key:"wrapPush",value:function(e){var t=this.getLatencySim();if(!t)return e();console.log("simulating ".concat(t,"ms of latency from client to server"));var n={receives:[],receive:function(e,t){this.receives.push([e,t])}};return setTimeout((function(){n.receives.reduce((function(e,t){var n=w(t,2),i=n[0],r=n[1];return e.receive(i,r)}),e())}),t),n}},{key:"reloadWithJitter",value:function(e){var t=this;this.disconnect();var n=T[0],i=T[1],r=Math.floor(Math.random()*(i-n+1))+n,o=G.updateLocal(e.name(),"consecutive-reloads",0,(function(e){return e+1}));this.log(e,"join",(function(){return["encountered ".concat(o," consecutive reloads")]})),o>10&&(this.log(e,"join",(function(){return["exceeded ".concat(10," consecutive reloads. Entering failsafe mode")]})),r=3e4),setTimeout((function(){t.hasPendingLink()?window.location=t.pendingLink:window.location.reload()}),r)}},{key:"getHookCallbacks",value:function(e){return this.hooks[e]}},{key:"isUnloaded",value:function(){return this.unloaded}},{key:"isConnected",value:function(){return this.socket.isConnected()}},{key:"getBindingPrefix",value:function(){return this.bindingPrefix}},{key:"binding",value:function(e){return"".concat(this.getBindingPrefix()).concat(e)}},{key:"channel",value:function(e,t){return this.socket.channel(e,t)}},{key:"joinRootViews",value:function(){var e=this,t=!1;return K.all(document,"".concat(j,":not([").concat("data-phx-parent-id","])"),(function(n){var i=e.joinRootView(n,e.getHref());e.root=e.root||i,n.getAttribute("data-phx-main")&&(e.main=i),t=!0})),t}},{key:"redirect",value:function(e,t){this.disconnect(),G.redirect(e,t)}},{key:"replaceMain",value:function(e,t){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.setPendingLink(e),o=this.main.el;this.main.showLoader(this.loaderTimeout),this.main.destroy(),G.fetchPage(e,(function(a,s){if(200!==a)return n.redirect(e);var u=document.createElement("template");u.innerHTML=s;var c=u.content.childNodes[0];if(!c||!n.isPhxView(c))return n.redirect(e);n.joinRootView(c,e,t,(function(e,t){1===t&&(n.commitPendingLink(r)?(o.replaceWith(e.el),n.main=e,i&&i()):e.destroy())}))}))}},{key:"isPhxView",value:function(e){return e.getAttribute&&null!==e.getAttribute(P)}},{key:"joinRootView",value:function(e,t,n,i){var r=new $(e,this,null,t,n);return this.roots[r.id]=r,r.join(i),r}},{key:"owner",value:function(e,t){var n=this,i=W(e.closest(j),(function(e){return n.getViewByEl(e)}));i&&t(i)}},{key:"withinTargets",value:function(e,t,n){var i=this;if(/^(0|[1-9](\d?)+)$/.test(t)){var r=e||K.findFirstComponentNode(document,t);if(!r)throw new Error("no phx-target's found matching @myself of ".concat(t));this.owner(r,(function(e){return n(e,r)}))}else{var o=Array.from(document.querySelectorAll(t));if(0===o.length)throw new Error("no phx-target's found for selector \"".concat(t,'"'));o.forEach((function(e){i.owner(e,(function(t){return n(t,e)}))}))}}},{key:"withinOwners",value:function(e,t){var n=e.getAttribute(this.binding("target"));null===n?this.owner(e,(function(n){return t(n,e)})):this.withinTargets(e,n,t)}},{key:"getViewByEl",value:function(e){var t=e.getAttribute("data-phx-root-id");return this.getRootById(t).getDescendentByEl(e)}},{key:"getRootById",value:function(e){return this.roots[e]}},{key:"onViewError",value:function(e){this.dropActiveElement(e)}},{key:"destroyAllViews",value:function(){for(var e in this.roots)this.roots[e].destroy(),delete this.roots[e]}},{key:"destroyViewByEl",value:function(e){this.getRootById(e.getAttribute("data-phx-root-id")).destroyDescendent(e.id)}},{key:"setActiveElement",value:function(e){var t=this;if(this.activeElement!==e){this.activeElement=e;var n=function(){e===t.activeElement&&(t.activeElement=null),e.removeEventListener("mouseup",t),e.removeEventListener("touchend",t)};e.addEventListener("mouseup",n),e.addEventListener("touchend",n)}}},{key:"getActiveElement",value:function(){return document.activeElement===document.body&&this.activeElement||document.activeElement}},{key:"dropActiveElement",value:function(e){this.prevActive&&e.ownsElement(this.prevActive)&&(this.prevActive=null)}},{key:"restorePreviouslyActiveFocus",value:function(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}},{key:"blurActiveElement",value:function(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}},{key:"bindTopLevelEvents",value:function(){var e=this;this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,window.addEventListener("pageshow",(function(t){t.persisted&&(e.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())})),this.bindClicks(),this.bindNav(),this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(function(t,n,i,r,o,a,s){var u=r.getAttribute(e.binding("key")),c=t.key&&t.key.toLowerCase();u&&u.toLowerCase()!==c||i.pushKey(r,o,n,a,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({key:t.key},e.eventMeta(n,t,r)))})),this.bind({blur:"focusout",focus:"focusin"},(function(t,n,i,r,o,a,s){s||i.pushEvent(n,r,o,a,e.eventMeta(n,t,r))})),this.bind({blur:"blur",focus:"focus"},(function(t,n,i,r,o,a,s){s&&"window"!==!s&&i.pushEvent(n,r,o,a,e.eventMeta(n,t,r))})))}},{key:"eventMeta",value:function(e,t,n){var i=this.metadataCallbacks[e];return i?i(t,n):{}}},{key:"setPendingLink",value:function(e){return this.linkRef++,this.pendingLink=e,this.linkRef}},{key:"commitPendingLink",value:function(e){return this.linkRef===e&&(this.href=this.pendingLink,this.pendingLink=null,!0)}},{key:"getHref",value:function(){return this.href}},{key:"hasPendingLink",value:function(){return!!this.pendingLink}},{key:"bind",value:function(e,t){var n=this,i=function(i){var r=e[i];n.on(r,(function(e){var r=n.binding(i),o=n.binding("window-".concat(i)),a=e.target.getAttribute&&e.target.getAttribute(r);a?n.debounce(e.target,e,(function(){n.withinOwners(e.target,(function(n,r){t(e,i,n,e.target,r,a,null)}))})):K.all(document,"[".concat(o,"]"),(function(r){var a=r.getAttribute(o);n.debounce(r,e,(function(){n.withinOwners(r,(function(n,o){t(e,i,n,r,o,a,"window")}))}))}))}))};for(var r in e)i(r)}},{key:"bindClicks",value:function(){var e=this;[!0,!1].forEach((function(t){var n=t?e.binding("capture-click"):e.binding("click");window.addEventListener("click",(function(i){var r=null,o=(r=t?i.target.matches("[".concat(n,"]"))?i.target:i.target.querySelector("[".concat(n,"]")):F(i.target,n))&&r.getAttribute(n);o&&("#"===r.getAttribute("href")&&i.preventDefault(),e.debounce(r,i,(function(){e.withinOwners(r,(function(t,n){t.pushEvent("click",r,n,o,e.eventMeta("click",i,r))}))})))}),t)}))}},{key:"bindNav",value:function(){var e=this;G.canPushState()&&(window.onpopstate=function(t){if(e.registerNewLocation(window.location)){var n=t.state||{},i=n.type,r=n.id,o=n.root,a=window.location.href;e.main.isConnected()&&"patch"===i&&r===e.main.id?e.main.pushLinkPatch(a,null):e.replaceMain(a,null,(function(){o&&e.replaceRootHistory()}))}},window.addEventListener("click",(function(t){var n=F(t.target,"data-phx-link"),i=n&&n.getAttribute("data-phx-link"),r=t.metaKey||t.ctrlKey||1===t.button;if(i&&e.isConnected()&&e.main&&!r){var o=n.href,a=n.getAttribute("data-phx-link-state");if(t.preventDefault(),e.pendingLink!==o)if("patch"===i)e.pushHistoryPatch(o,a,n);else{if("redirect"!==i)throw new Error("expected ".concat("data-phx-link",' to be "patch" or "redirect", got: ').concat(i));e.historyRedirect(o,a)}}}),!1))}},{key:"withPageLoading",value:function(e,t){K.dispatchEvent(window,"phx:page-loading-start",e);var n=function(){return K.dispatchEvent(window,"phx:page-loading-stop",e)};return t?t(n):n}},{key:"pushHistoryPatch",value:function(e,t,n){var i=this;this.withPageLoading({to:e,kind:"patch"},(function(r){i.main.pushLinkPatch(e,n,(function(){i.historyPatch(e,t),r()}))}))}},{key:"historyPatch",value:function(e,t){G.pushState(t,{type:"patch",id:this.main.id},e),this.registerNewLocation(window.location)}},{key:"historyRedirect",value:function(e,t,n){var i=this;this.withPageLoading({to:e,kind:"redirect"},(function(r){i.replaceMain(e,n,(function(){G.pushState(t,{type:"redirect",id:i.main.id},e),i.registerNewLocation(window.location),r()}))}))}},{key:"replaceRootHistory",value:function(){G.pushState("replace",{root:!0,type:"patch",id:this.main.id})}},{key:"registerNewLocation",value:function(e){var t=this.currentLocation;return t.pathname+t.search!==e.pathname+e.search&&(this.currentLocation=B(e),!0)}},{key:"bindForms",value:function(){var e=this,t=0;this.on("submit",(function(t){var n=t.target.getAttribute(e.binding("submit"));n&&(t.preventDefault(),t.target.disabled=!0,e.withinOwners(t.target,(function(e,i){return e.submitForm(t.target,i,n)})))}),!1);for(var n=function(){var n=r[i];e.on(n,(function(i){var r=i.target,o=r.form&&r.form.getAttribute(e.binding("change"));if(o&&("number"!==r.type||!r.validity||!r.validity.badInput)){var a=t;t++;var s=K.private(r,"prev-iteration")||{},u=s.at,c=s.type;u===a-1&&n!==c||(K.putPrivate(r,"prev-iteration",{at:a,type:n}),e.debounce(r,i,(function(){e.withinOwners(r.form,(function(t,n){K.isTextualInput(r)?K.putPrivate(r,"phx-has-focused",!0):e.setActiveElement(r),t.pushInput(r,n,o,i.target)}))})))}}),!1)},i=0,r=["change","input"];i<r.length;i++)n()}},{key:"debounce",value:function(e,t,n){var i=this.binding("debounce"),r=this.binding("throttle"),o=this.defaults.debounce.toString(),a=this.defaults.throttle.toString();K.debounce(e,t,i,o,r,a,n)}},{key:"silenceEvents",value:function(e){this.silenced=!0,e(),this.silenced=!1}},{key:"on",value:function(e,t){var n=this;window.addEventListener(e,(function(e){n.silenced||t(e)}))}}]),e}(),G={canPushState:function(){return void 0!==history.pushState},dropLocal:function(e,t){return window.localStorage.removeItem(this.localKey(e,t))},updateLocal:function(e,t,n,i){var r=this.getLocal(e,t),o=this.localKey(e,t),a=null===r?n:i(r);return window.localStorage.setItem(o,JSON.stringify(a)),a},getLocal:function(e,t){return JSON.parse(window.localStorage.getItem(this.localKey(e,t)))},fetchPage:function(e,t){var n=new XMLHttpRequest;n.open("GET",e,!0),n.timeout=3e4,n.setRequestHeader("content-type","text/html"),n.setRequestHeader("cache-control","max-age=0, no-cache, no-store, must-revalidate, post-check=0, pre-check=0"),n.setRequestHeader("x-requested-with","live-link"),n.onerror=function(){return t(400)},n.ontimeout=function(){return t(504)},n.onreadystatechange=function(){if(4===n.readyState){var i=new URL(e),r=i.pathname+i.search,o=new URL(n.getResponseHeader("x-response-url")),a=o.pathname+o.search;return"live-link"!==n.getResponseHeader("x-requested-with")?t(400):a!=r?t(302):200!==n.status?t(n.status):void t(200,n.responseText)}},n.send()},pushState:function(e,t,n){if(this.canPushState()){if(n!==window.location.href){history[e+"State"](t,"",n||null);var i=this.getHashTargetEl(window.location.hash);i?i.scrollIntoView():"redirect"===t.type&&window.scroll(0,0)}}else this.redirect(n)},setCookie:function(e,t){document.cookie="".concat(e,"=").concat(t)},getCookie:function(e){return document.cookie.replace(new RegExp("(?:(?:^|.*;s*)".concat(e,"s*=s*([^;]*).*$)|^.*$")),"$1")},redirect:function(e,t){t&&G.setCookie("__phoenix_flash__",t+"; max-age=60000; path=/"),window.location=e},localKey:function(e,t){return"".concat(e,"-").concat(t)},getHashTargetEl:function(e){if(""!==e.toString())return document.getElementById(e)||document.querySelector('a[name="'.concat(e.substring(1),'"]'))}},K={byId:function(e){return document.getElementById(e)||N("no id found for ".concat(e))},removeClass:function(e,t){e.classList.remove(t),0===e.classList.length&&e.removeAttribute("class")},all:function(e,t,n){var i=Array.from(e.querySelectorAll(t));return n?i.forEach(n):i},findFirstComponentNode:function(e,t){return e.querySelector("[".concat(_,'="').concat(t,'"]'))},findComponentNodeList:function(e,t){return this.all(e,"[".concat(_,'="').concat(t,'"]'))},findPhxChildrenInFragment:function(e,t){var n=document.createElement("template");return n.innerHTML=e,this.findPhxChildren(n.content,t)},isPhxUpdate:function(e,t,n){return e.getAttribute&&n.indexOf(e.getAttribute(t))>=0},findPhxChildren:function(e,t){return this.all(e,"".concat(j,"[").concat("data-phx-parent-id",'="').concat(t,'"]'))},findParentCIDs:function(e,t){var n=this,i=new Set(t);return t.reduce((function(t,i){var r="[".concat(_,'="').concat(i,'"] [').concat(_,"]");return n.all(e,r).map((function(e){return parseInt(e.getAttribute(_))})).forEach((function(e){return t.delete(e)})),t}),i)},private:function(e,t){return e.phxPrivate&&e.phxPrivate[t]},deletePrivate:function(e,t){e.phxPrivate&&delete e.phxPrivate[t]},putPrivate:function(e,t,n){e.phxPrivate||(e.phxPrivate={}),e.phxPrivate[t]=n},copyPrivates:function(e,t){t.phxPrivate&&(e.phxPrivate=B(t.phxPrivate))},putTitle:function(e){var t=document.querySelector("title").dataset,n=t.prefix,i=t.suffix;document.title="".concat(n||"").concat(e).concat(i||"")},debounce:function(e,t,n,i,r,o,a){var s=this,u=e.getAttribute(n),c=e.getAttribute(r);""===u&&(u=i),""===c&&(c=o);var l=u||c;switch(l){case null:return a();case"blur":if(this.private(e,"debounce-blur"))return;return e.addEventListener("blur",(function(){return a()})),void this.putPrivate(e,"debounce-blur",l);default:var h=parseInt(l);if(isNaN(h))return N("invalid throttle/debounce value: ".concat(l));if(c&&"keydown"===t.type){var f=this.private(e,"debounce-prev-key");if(this.putPrivate(e,"debounce-prev-key",t.which),f!==t.which)return a()}if(this.private(e,"debounce-timer"))return;var d=function(t){c&&"phx-change"===t.type&&t.detail.triggeredBy.name===e.name||(clearTimeout(s.private(e,"debounce-timer")),s.deletePrivate(e,"debounce-timer"))},p=function(){e.form&&(e.form.removeEventListener("phx-change",d),e.form.removeEventListener("submit",d)),e.removeEventListener("blur",s.private(e,"debounce-blur-timer")),c||e.removeEventListener("keydown",d),s.deletePrivate(e,"debounce-blur-timer"),s.deletePrivate(e,"debounce-timer"),c||a()},v=function(){clearTimeout(s.private(e,"debounce-timer")),p()};this.putPrivate(e,"debounce-timer",setTimeout(p,h)),e.addEventListener("blur",v),c||e.addEventListener("keydown",d),this.putPrivate(e,"debounce-blur-timer",v),e.form&&(e.form.addEventListener("phx-change",d),e.form.addEventListener("submit",d)),c&&a()}},discardError:function(e,t,n){var i=t.getAttribute&&t.getAttribute(n),r=i&&e.querySelector("#".concat(i));r&&(this.private(r,"phx-has-focused")||this.private(r.form,"phx-has-submitted")||t.classList.add("phx-no-feedback"))},isPhxChild:function(e){return e.getAttribute&&e.getAttribute("data-phx-parent-id")},dispatchEvent:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=new CustomEvent(t,{bubbles:!0,cancelable:!0,detail:n});e.dispatchEvent(i)},cloneNode:function(e,t){if(void 0===t)return e.cloneNode(!0);var n=e.cloneNode(!1);return n.innerHTML=t,n},mergeAttrs:function(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],i=t.attributes,r=i.length-1;r>=0;r--){var o=i[r].name;n.indexOf(o)<0&&e.setAttribute(o,t.getAttribute(o))}for(var a=e.attributes,s=a.length-1;s>=0;s--){var u=a[s].name;t.hasAttribute(u)||e.removeAttribute(u)}},mergeFocusedInput:function(e,t){e instanceof HTMLSelectElement||K.mergeAttrs(e,t,["value"]),t.readOnly?e.setAttribute("readonly",!0):e.removeAttribute("readonly")},restoreFocus:function(e,t,n){if(K.isTextualInput(e)){var i=e.matches(":focus");e.readOnly&&e.blur(),i||e.focus(),(e.setSelectionRange&&"text"===e.type||"textarea"===e.type)&&e.setSelectionRange(t,n)}},isFormInput:function(e){return/^(?:input|select|textarea)$/i.test(e.tagName)},syncAttrsToProps:function(e){e instanceof HTMLInputElement&&O.indexOf(e.type.toLocaleLowerCase())>=0&&(e.checked=null!==e.getAttribute("checked"))},isTextualInput:function(e){return D.indexOf(e.type)>=0},isNowTriggerFormExternal:function(e,t){return e.getAttribute&&null!==e.getAttribute(t)},undoRefs:function(e,t){var n=this;K.all(t,"[".concat(M,"]"),(function(t){return n.syncPendingRef(e,t,t)}))},syncPendingRef:function(e,t,n){var i=t.getAttribute&&t.getAttribute(M);if(null===i)return!0;var r=parseInt(i);return null!==e&&e>=r?([t,n].forEach((function(e){e.removeAttribute(M),null!==e.getAttribute("data-phx-readonly")&&(e.readOnly=!1,e.removeAttribute("data-phx-readonly")),null!==e.getAttribute("data-phx-disabled")&&(e.disabled=!1,e.removeAttribute("data-phx-disabled")),L.forEach((function(t){return K.removeClass(e,t)}));var t=e.getAttribute("data-phx-disable-with-restore");null!==t&&(e.innerText=t,e.removeAttribute("data-phx-disable-with-restore"))})),!0):(L.forEach((function(e){t.classList.contains(e)&&n.classList.add(e)})),n.setAttribute(M,t.getAttribute(M)),!K.isFormInput(t)&&!/submit/i.test(t.type))}},X=function(){function e(t,n,i,r,o,a){y(this,e),this.view=t,this.liveSocket=t.liveSocket,this.container=n,this.id=i,this.rootID=t.root.id,this.html=r,this.targetCID=o,this.ref=a,this.cidPatch="number"==typeof this.targetCID,this.callbacks={beforeadded:[],beforeupdated:[],beforediscarded:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[]}}return k(e,[{key:"before",value:function(e,t){this.callbacks["before".concat(e)].push(t)}},{key:"after",value:function(e,t){this.callbacks["after".concat(e)].push(t)}},{key:"trackBefore",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];this.callbacks["before".concat(e)].forEach((function(e){return e.apply(void 0,n)}))}},{key:"trackAfter",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];this.callbacks["after".concat(e)].forEach((function(e){return e.apply(void 0,n)}))}},{key:"markPrunableContentForRemoval",value:function(){K.all(this.container,"[phx-update=append] > *, [phx-update=prepend] > *",(function(e){e.setAttribute("data-phx-remove","")}))}},{key:"perform",value:function(){var e=this,t=this.view,n=this.liveSocket,i=this.container,r=this.html,o=this.isCIDPatch()?this.targetCIDContainer():i;if(!this.isCIDPatch()||o){var a=n.getActiveElement(),s=a&&K.isTextualInput(a)?a:{},u=s.selectionStart,c=s.selectionEnd,l=n.binding("update"),h=n.binding("feedback-for"),f=n.binding("trigger-action"),d=[],v=[],m=[],g=n.time("premorph container prep",(function(){return e.buildDiffHTML(i,r,l,o)}));return this.trackBefore("added",i),this.trackBefore("updated",i,i),n.time("morphdom",(function(){p(o,g,{childrenOnly:null===o.getAttribute(_),onBeforeNodeAdded:function(t){return K.discardError(o,t,h),e.trackBefore("added",t),t},onNodeAdded:function(n){K.isNowTriggerFormExternal(n,f)&&n.submit(),K.isPhxChild(n)&&t.ownsElement(n)&&e.trackAfter("phxChildAdded",n),d.push(n)},onNodeDiscarded:function(t){e.trackAfter("discarded",t)},onBeforeNodeDiscarded:function(t){return!(!t.getAttribute||null===t.getAttribute("data-phx-remove"))||(null===t.parentNode||!K.isPhxUpdate(t.parentNode,l,["append","prepend"]))&&!e.skipCIDSibling(t)&&(e.trackBefore("discarded",t),K.isPhxChild(t)?(n.destroyViewByEl(t),!0):void 0)},onElUpdated:function(e){K.isNowTriggerFormExternal(e,f)&&e.submit(),v.push(e)},onBeforeElUpdated:function(t,n){if(e.skipCIDSibling(n))return!1;if("ignore"===t.getAttribute(l))return e.trackBefore("updated",t,n),K.mergeAttrs(t,n),v.push(t),!1;if("number"===t.type&&t.validity&&t.validity.badInput)return!1;if(!K.syncPendingRef(e.ref,t,n))return!1;if(K.isPhxChild(n)){var i=t.getAttribute("data-phx-static");return K.mergeAttrs(t,n),t.setAttribute("data-phx-static",i),t.setAttribute("data-phx-root-id",e.rootID),!1}if(K.copyPrivates(n,t),K.discardError(o,n,h),a&&t.isSameNode(a)&&K.isFormInput(t)&&!e.forceFocusedSelectUpdate(t,n))return e.trackBefore("updated",t,n),K.mergeFocusedInput(t,n),K.syncAttrsToProps(t),v.push(t),!1;if(K.isPhxUpdate(n,l,["append","prepend"])){var r="append"===n.getAttribute(l),s=Array.from(t.children).map((function(e){return e.id})),u=Array.from(n.children).map((function(e){return e.id}));r&&!u.find((function(e){return s.indexOf(e)>=0}))||m.push([n.id,s])}return K.syncAttrsToProps(n),e.trackBefore("updated",t,n),!0}})})),n.isDebugEnabled()&&function(){for(var e=new Set,t=document.querySelectorAll("*[id]"),n=0,i=t.length;n<i;n++)e.has(t[n].id)?console.error("Multiple IDs detected: ".concat(t[n].id,". Ensure unique element ids.")):e.add(t[n].id)}(),m.length>0&&n.time("post-morph append/prepend restoration",(function(){m.forEach((function(e){var t=w(e,2),n=t[0],i=t[1],r=K.byId(n);"append"===r.getAttribute(l)?i.reverse().forEach((function(e){W(document.getElementById(e),(function(e){return r.insertBefore(e,r.firstChild)}))})):i.forEach((function(e){W(document.getElementById(e),(function(e){return r.appendChild(e)}))}))}))})),n.silenceEvents((function(){return K.restoreFocus(a,u,c)})),K.dispatchEvent(document,"phx:update"),d.forEach((function(t){return e.trackAfter("added",t)})),v.forEach((function(t){return e.trackAfter("updated",t)})),!0}}},{key:"forceFocusedSelectUpdate",value:function(e,t){return!0===e.multiple||e.innerHTML!=t.innerHTML}},{key:"isCIDPatch",value:function(){return this.cidPatch}},{key:"skipCIDSibling",value:function(e){return e.nodeType===Node.ELEMENT_NODE&&null!==e.getAttribute("data-phx-skip")}},{key:"targetCIDContainer",value:function(){if(this.isCIDPatch()){var e=v(K.findComponentNodeList(this.container,this.targetCID)),t=e[0];return 0===e.slice(1).length?t:t&&t.parentNode}}},{key:"buildDiffHTML",value:function(e,t,n,i){var r=this,o=this.isCIDPatch(),a=o&&i.getAttribute(_)===this.targetCID.toString();if(!o||a)return t;var s=null,u=document.createElement("template");s=K.cloneNode(i);var c=v(K.findComponentNodeList(s,this.targetCID)),l=c[0],h=c.slice(1);return u.innerHTML=t,h.forEach((function(e){return e.remove()})),Array.from(s.childNodes).forEach((function(e){e.nodeType===Node.ELEMENT_NODE&&e.getAttribute(_)!==r.targetCID.toString()&&(e.setAttribute("data-phx-skip",""),e.innerHTML="")})),Array.from(u.content.childNodes).forEach((function(e){return s.insertBefore(e,l)})),l.remove(),s.outerHTML}}]),e}(),$=function(){function e(t,n,i,r,o){var a=this;y(this,e),this.liveSocket=n,this.flash=o,this.parent=i,this.root=i?i.root:this,this.el=t,this.id=this.el.id,this.view=this.el.getAttribute(P),this.ref=0,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.href=r,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(){},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.children=this.parent?null:{},this.root.children[this.id]={},this.channel=this.liveSocket.channel("lv:".concat(this.id),(function(){return{url:a.href,params:a.connectParams(),session:a.getSession(),static:a.getStatic(),flash:a.flash}})),this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel()}return k(e,[{key:"isMain",value:function(){return this.liveSocket.main===this}},{key:"connectParams",value:function(){var e=this.liveSocket.params(this.view),t=K.all(document,"[".concat(this.binding("track-static"),"]")).map((function(e){return e.src||e.href})).filter((function(e){return"string"==typeof e}));return t.length>0&&(e._track_static=t),e._mounts=this.joinCount,e}},{key:"name",value:function(){return this.view}},{key:"isConnected",value:function(){return this.channel.canPush()}},{key:"getSession",value:function(){return this.el.getAttribute("data-phx-session")}},{key:"getStatic",value:function(){var e=this.el.getAttribute("data-phx-static");return""===e?null:e}},{key:"destroy",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(){};this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);var n=function(){for(var n in t(),e.viewHooks)e.destroyHook(e.viewHooks[n])};this.log("destroyed",(function(){return["the child has been removed from the parent"]})),this.channel.leave().receive("ok",n).receive("error",n).receive("timeout",n)}},{key:"setContainerClasses",value:function(){var e;this.el.classList.remove("phx-connected","phx-disconnected","phx-error"),(e=this.el.classList).add.apply(e,arguments)}},{key:"isLoading",value:function(){return this.el.classList.contains("phx-disconnected")}},{key:"showLoader",value:function(e){var t=this;if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout((function(){return t.showLoader()}),e);else{for(var n in this.viewHooks)this.viewHooks[n].__trigger__("disconnected");this.setContainerClasses("phx-disconnected")}}},{key:"hideLoader",value:function(){clearTimeout(this.loaderTimer),this.setContainerClasses("phx-connected")}},{key:"triggerReconnected",value:function(){for(var e in this.viewHooks)this.viewHooks[e].__trigger__("reconnected")}},{key:"log",value:function(e,t){this.liveSocket.log(this,e,t)}},{key:"onJoin",value:function(e){var t=this,n=e.rendered;this.joinCount++,this.childJoins=0,this.joinPending=!0,this.flash=null,this.log("join",(function(){return["",B(n)]})),n.title&&K.putTitle(n.title),G.dropLocal(this.name(),"consecutive-reloads"),this.rendered=new q(this.id,n);var i=this.renderContainer(null,"join");this.dropPendingRefs();var r=this.formsForRecovery(i);this.joinCount>1&&r.length>0?r.forEach((function(e,n){t.pushFormRecovery(e,(function(e){n===r.length-1&&t.onJoinComplete(e,i)}))})):this.onJoinComplete(e,i)}},{key:"dropPendingRefs",value:function(){K.all(this.el,"[".concat(M,"]"),(function(e){return e.removeAttribute(M)}))}},{key:"onJoinComplete",value:function(e,t){var n=this,i=e.live_patch;if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(i,t);0===K.findPhxChildrenInFragment(t,this.id).filter((function(e){return n.joinChild(e)})).length?this.parent?(this.root.pendingJoinOps.push([this,function(){return n.applyJoinPatch(i,t)}]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(i,t)):this.root.pendingJoinOps.push([this,function(){return n.applyJoinPatch(i,t)}])}},{key:"attachTrueDocEl",value:function(){this.el=K.byId(this.id),this.el.setAttribute("data-phx-root-id",this.root.id)}},{key:"applyJoinPatch",value:function(e,t){var n=this;this.attachTrueDocEl();var i=new X(this,this.el,this.id,t,null);if(i.markPrunableContentForRemoval(),this.joinPending=!1,this.performPatch(i),this.joinNewChildren(),K.all(this.el,"[".concat(this.binding("hook"),"]"),(function(e){var t=n.addHook(e);t&&t.__trigger__("mounted")})),this.applyPendingUpdates(),e){var r=e.kind,o=e.to;this.liveSocket.historyPatch(o,r)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}},{key:"performPatch",value:function(e){var t=this,n=[],i=!1,r=new Set;return e.after("added",(function(e){var n=t.addHook(e);n&&n.__trigger__("mounted")})),e.after("phxChildAdded",(function(e){return i=!0})),e.before("updated",(function(e,n){var i=t.getHook(e),o=i&&"ignore"===e.getAttribute(t.binding("update"));!i||e.isEqualNode(n)||o&&function(e,t){return JSON.stringify(e)===JSON.stringify(t)}(e.dataset,n.dataset)||(r.add(e.id),i.__trigger__("beforeUpdate"))})),e.after("updated",(function(e){var n=t.getHook(e);n&&r.has(e.id)&&n.__trigger__("updated")})),e.before("discarded",(function(e){var n=t.getHook(e);n&&n.__trigger__("beforeDestroy")})),e.after("discarded",(function(e){var i=t.componentID(e);"number"==typeof i&&-1===n.indexOf(i)&&n.push(i);var r=t.getHook(e);r&&t.destroyHook(r)})),e.perform(),this.maybePushComponentsDestroyed(n),i}},{key:"joinNewChildren",value:function(){var e=this;K.findPhxChildren(this.el,this.id).forEach((function(t){return e.joinChild(t)}))}},{key:"getChildById",value:function(e){return this.root.children[this.id][e]}},{key:"getDescendentByEl",value:function(e){return e.id===this.id?this:this.children[e.getAttribute("data-phx-parent-id")][e.id]}},{key:"destroyDescendent",value:function(e){for(var t in this.root.children)for(var n in this.root.children[t])if(n===e)return this.root.children[t][n].destroy()}},{key:"joinChild",value:function(t){if(!this.getChildById(t.id)){var n=new e(t,this.liveSocket,this);return this.root.children[this.id][n.id]=n,n.join(),this.childJoins++,!0}}},{key:"isJoinPending",value:function(){return this.joinPending}},{key:"ackJoin",value:function(e){this.childJoins--,0===this.childJoins&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}},{key:"onAllChildJoinsComplete",value:function(){this.joinCallback(),this.pendingJoinOps.forEach((function(e){var t=w(e,2),n=t[0],i=t[1];n.isDestroyed()||i()})),this.pendingJoinOps=[]}},{key:"update",value:function(e,t,n){var i=this;if(!U(e)||null!==n){if(e.title&&K.putTitle(e.title),this.isJoinPending()||this.liveSocket.hasPendingLink())return this.pendingDiffs.push({diff:e,cid:t,ref:n});this.log("update",(function(){return["",B(e)]})),this.rendered.mergeDiff(e);var r=!1;"number"==typeof t?this.liveSocket.time("component ack patch complete",(function(){i.componentPatch(e.c[t],t,n)&&(r=!0)})):this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",(function(){K.findParentCIDs(i.el,i.rendered.componentCIDs(e)).forEach((function(t){i.componentPatch(e.c[t],t,n)&&(r=!0)}))})):U(e)||this.liveSocket.time("full patch complete",(function(){var t=i.renderContainer(e,"update"),o=new X(i,i.el,i.id,t,null,n);r=i.performPatch(o)})),K.undoRefs(n,this.el),r&&this.joinNewChildren()}}},{key:"renderContainer",value:function(e,t){var n=this;return this.liveSocket.time("toString diff (".concat(t,")"),(function(){var t=n.el.tagName,i=e?n.rendered.componentCIDs(e):null,r=n.rendered.toString(i);return"<".concat(t,">").concat(r,"</").concat(t,">")}))}},{key:"componentPatch",value:function(e,t,n){if(U(e))return!1;var i=this.rendered.componentToString(t),r=new X(this,this.el,this.id,i,t,n);return this.performPatch(r)}},{key:"getHook",value:function(e){return this.viewHooks[Z.elementID(e)]}},{key:"addHook",value:function(e){if(!Z.elementID(e)&&e.getAttribute){var t=e.getAttribute(this.binding("hook"));if(!t||this.ownsElement(e)){var n=this.liveSocket.getHookCallbacks(t);if(n){var i=new Z(this,e,n);return this.viewHooks[Z.elementID(i.el)]=i,i}null!==t&&N('unknown hook found for "'.concat(t,'"'),e)}}}},{key:"destroyHook",value:function(e){e.__trigger__("destroyed"),delete this.viewHooks[Z.elementID(e.el)]}},{key:"applyPendingUpdates",value:function(){var e=this;this.pendingDiffs.forEach((function(t){var n=t.diff,i=t.cid,r=t.ref;return e.update(n,i,r)})),this.pendingDiffs=[]}},{key:"onChannel",value:function(e,t){var n=this;this.liveSocket.onChannel(this.channel,e,(function(e){n.isJoinPending()?n.root.pendingJoinOps.push([n,function(){return t(e)}]):t(e)}))}},{key:"bindChannel",value:function(){var e=this;this.onChannel("diff",(function(t){return e.update(t)})),this.onChannel("redirect",(function(t){var n=t.to,i=t.flash;return e.onRedirect({to:n,flash:i})})),this.onChannel("live_patch",(function(t){return e.onLivePatch(t)})),this.onChannel("live_redirect",(function(t){return e.onLiveRedirect(t)})),this.onChannel("session",(function(t){var n=t.token;return e.el.setAttribute("data-phx-session",n)})),this.channel.onError((function(t){return e.onError(t)})),this.channel.onClose((function(){return e.onError({reason:"closed"})}))}},{key:"destroyAllChildren",value:function(){for(var e in this.root.children[this.id])this.getChildById(e).destroy()}},{key:"onLiveRedirect",value:function(e){var t=e.to,n=e.kind,i=e.flash,r=this.expandURL(t);this.liveSocket.historyRedirect(r,n,i)}},{key:"onLivePatch",value:function(e){var t=e.to,n=e.kind;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,n)}},{key:"expandURL",value:function(e){return e.startsWith("/")?"".concat(window.location.protocol,"//").concat(window.location.host).concat(e):e}},{key:"onRedirect",value:function(e){var t=e.to,n=e.flash;this.liveSocket.redirect(t,n)}},{key:"isDestroyed",value:function(){return this.destroyed}},{key:"join",value:function(e){var t=this;this.parent||(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=function(){return e&&e(t,t.joinCount)},this.liveSocket.wrapPush((function(){return t.channel.join().receive("ok",(function(e){return t.onJoin(e)})).receive("error",(function(e){return t.onJoinError(e)})).receive("timeout",(function(){return t.onJoinError({reason:"timeout"})}))}))}},{key:"onJoinError",value:function(e){return(e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect?this.onRedirect(e.redirect):e.live_redirect?this.onLiveRedirect(e.live_redirect):(this.log("error",(function(){return["unable to join",e]})),this.liveSocket.reloadWithJitter(this))}},{key:"onError",value:function(e){if(this.isJoinPending())return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.log("error",(function(){return["view crashed",e]})),this.liveSocket.onViewError(this),document.activeElement.blur(),this.liveSocket.isUnloaded()?this.showLoader(200):this.displayError()}},{key:"displayError",value:function(){this.isMain()&&K.dispatchEvent(window,"phx:page-loading-start",{to:this.href,kind:"error"}),this.showLoader(),this.setContainerClasses("phx-disconnected","phx-error")}},{key:"pushWithReply",value:function(e,t,n){var i=this,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:function(){},o=w(e?e():[null,[]],2),a=o[0],s=w(o[1],1)[0],u=function(){};return s&&null!==s.getAttribute(this.binding("page-loading"))&&(u=this.liveSocket.withPageLoading({kind:"element",target:s})),"number"!=typeof n.cid&&delete n.cid,this.liveSocket.wrapPush((function(){return i.channel.push(t,n,3e4).receive("ok",(function(e){(e.diff||null!==a)&&i.update(e.diff||{},n.cid,a),e.redirect&&i.onRedirect(e.redirect),e.live_patch&&i.onLivePatch(e.live_patch),e.live_redirect&&i.onLiveRedirect(e.live_redirect),u(),r(e)}))}))}},{key:"putRef",value:function(e,t){var n=this.ref++,i=this.binding("disable-with");return e.forEach((function(e){e.classList.add("phx-".concat(t,"-loading")),e.setAttribute(M,n);var r=e.getAttribute(i);null!==r&&(e.getAttribute("data-phx-disable-with-restore")||e.setAttribute("data-phx-disable-with-restore",e.innerText),e.innerText=r)})),[n,e]}},{key:"componentID",value:function(e){var t=e.getAttribute&&e.getAttribute(_);return t?parseInt(t):null}},{key:"targetComponentID",value:function(e,t){return e.getAttribute(this.binding("target"))?this.closestComponentID(t):null}},{key:"closestComponentID",value:function(e){var t=this;return e?W(e.closest("[".concat(_,"]")),(function(e){return t.ownsElement(e)&&t.componentID(e)})):null}},{key:"pushHookEvent",value:function(e,t,n){this.pushWithReply(null,"event",{type:"hook",event:t,value:n,cid:this.closestComponentID(e)})}},{key:"extractMeta",value:function(e,t){for(var n=this.binding("value-"),i=0;i<e.attributes.length;i++){var r=e.attributes[i].name;r.startsWith(n)&&(t[r.replace(n,"")]=e.getAttribute(r))}return void 0!==e.value&&(t.value=e.value,"INPUT"===e.tagName&&O.indexOf(e.type)>=0&&!e.checked&&delete t.value),t}},{key:"pushEvent",value:function(e,t,n,i,r){var o=this;this.pushWithReply((function(){return o.putRef([t],e)}),"event",{type:e,event:i,value:this.extractMeta(t,r),cid:this.targetComponentID(t,n)})}},{key:"pushKey",value:function(e,t,n,i,r){var o=this;this.pushWithReply((function(){return o.putRef([e],n)}),"event",{type:n,event:i,value:this.extractMeta(e,r),cid:this.targetComponentID(e,t)})}},{key:"pushInput",value:function(e,t,n,i,r){var o=this;K.dispatchEvent(e.form,"phx-change",{triggeredBy:e}),this.pushWithReply((function(){return o.putRef([e,e.form],"change")}),"event",{type:"form",event:n,value:V(e.form,{_target:i.name}),cid:this.targetComponentID(e.form,t)},r)}},{key:"pushFormSubmit",value:function(e,t,n,i){var r=this,o=function(e){return!F(e,"".concat(r.binding("update"),"=ignore"),e.form)};this.pushWithReply((function(){var t=K.all(e,"[".concat(r.binding("disable-with"),"]")),n=K.all(e,"button").filter(o),i=K.all(e,"input").filter(o);return n.forEach((function(e){e.setAttribute("data-phx-disabled",e.disabled),e.disabled=!0})),i.forEach((function(e){e.setAttribute("data-phx-readonly",e.readOnly),e.readOnly=!0})),e.setAttribute(r.binding("page-loading"),""),r.putRef([e].concat(t).concat(n).concat(i),"submit")}),"event",{type:"form",event:n,value:V(e),cid:this.targetComponentID(e,t)},i)}},{key:"pushFormRecovery",value:function(e,t){var n=this;this.liveSocket.withinOwners(e,(function(i,r){var o=e.elements[0],a=e.getAttribute(n.binding("auto-recover"))||e.getAttribute(n.binding("change"));i.pushInput(o,r,a,o,t)}))}},{key:"pushLinkPatch",value:function(e,t,n){var i=this;this.isLoading()||this.showLoader(this.liveSocket.loaderTimeout);var r=this.liveSocket.setPendingLink(e),o=t?function(){return i.putRef([t],"click")}:null;this.pushWithReply(o,"link",{url:e},(function(t){t.link_redirect?i.liveSocket.replaceMain(e,null,n,r):i.liveSocket.commitPendingLink(r)&&(i.href=e,i.applyPendingUpdates(),i.hideLoader(),i.triggerReconnected(),n&&n())})).receive("timeout",(function(){return i.liveSocket.redirect(window.location.href)}))}},{key:"formsForRecovery",value:function(e){var t=this,n=this.binding("change"),i=document.createElement("template");return i.innerHTML=e,K.all(this.el,"form[".concat(n,"]")).filter((function(e){return t.ownsElement(e)})).filter((function(e){return"ignore"!==e.getAttribute(t.binding("auto-recover"))})).filter((function(e){return i.content.querySelector("form[".concat(n,'="').concat(e.getAttribute(n),'"]'))}))}},{key:"maybePushComponentsDestroyed",value:function(e){var t=this,n=e.filter((function(e){return 0===K.findComponentNodeList(t.el,e).length}));n.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:n},(function(){t.rendered.pruneCIDs(n)}))}},{key:"ownsElement",value:function(e){return e.getAttribute("data-phx-parent-id")===this.id||W(e.closest(j),(function(e){return e.id}))===this.id}},{key:"submitForm",value:function(e,t,n){var i=this;K.putPrivate(e,"phx-has-submitted",!0),this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,n,(function(){i.liveSocket.restorePreviouslyActiveFocus()}))}},{key:"binding",value:function(e){return this.liveSocket.binding(e)}}]),e}(),Q=1,Z=function(){function e(t,n,i){for(var r in y(this,e),this.__view=t,this.__liveSocket=t.liveSocket,this.__callbacks=i,this.el=n,this.viewName=t.name(),this.el.phxHookId=this.constructor.makeID(),this.__callbacks)this[r]=this.__callbacks[r]}return k(e,null,[{key:"makeID",value:function(){return Q++}},{key:"elementID",value:function(e){return e.phxHookId}}]),k(e,[{key:"pushEvent",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.__view.pushHookEvent(null,e,t)}},{key:"pushEventTo",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.__liveSocket.withinTargets(null,e,(function(e,i){e.pushHookEvent(i,t,n)}))}},{key:"__trigger__",value:function(e){var t=this.__callbacks[e];t&&t.call(this)}}]),e}();t.default=z},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==("undefined"==typeof window?"undefined":a(window))&&(n=window)}e.exports=n},function(e,t,n){(function(t){t.Phoenix||(t.Phoenix={}),e.exports=t.Phoenix.LiveView=n(0)}).call(this,n(1))}])},"object"==a(t)&&"object"==a(e)?e.exports=o():(i=[],void 0===(r="function"==typeof(n=o)?n.apply(t,i):n)||(e.exports=r))}).call(this,n(1)(e))},function(e,t,n){e.exports=n(8)},function(e,t,n){},function(e,t,n){"use strict";!function(){var e=function(){if("function"==typeof window.CustomEvent)return window.CustomEvent;function e(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}return e.prototype=window.Event.prototype,e}();function t(e,t){var n=document.createElement("input");return n.type="hidden",n.name=e,n.value=t,n}function n(e){var n=e.getAttribute("data-to"),i=t("_method",e.getAttribute("data-method")),r=t("_csrf_token",e.getAttribute("data-csrf")),o=document.createElement("form"),a=e.getAttribute("target");o.method="get"===e.getAttribute("data-method")?"get":"post",o.action=n,o.style.display="hidden",a&&(o.target=a),o.appendChild(r),o.appendChild(i),document.body.appendChild(o),o.submit()}window.addEventListener("click",(function(t){for(var i=t.target;i&&i.getAttribute;){var r=new e("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!i.dispatchEvent(r))return t.preventDefault(),t.stopImmediatePropagation(),!1;if(i.getAttribute("data-method"))return n(i),t.preventDefault(),!1;i=i.parentNode}}),!1),window.addEventListener("phoenix.link.click",(function(e){var t=e.target.getAttribute("data-confirm");t&&!window.confirm(t)&&e.preventDefault()}),!1)}()},function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(5),n(6);var i=n(2),r=n(0),o=n.n(r),a=n(3);function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)))return;var n=[],i=!0,r=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(i=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){r=!0,o=e}finally{try{i||null==s.return||s.return()}finally{if(r)throw o}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var u={phoenix:[242,110,64],elixir:[75,68,115],red:[255,99,132],orange:[255,159,64],yellow:[255,205,86],green:[75,192,192],blue:[54,162,253],purple:[153,102,255],grey:[201,203,207]},c=Object.keys(u),l={at:function(e){var t=s(l.rgb(e),3),n=t[0],i=t[1],r=t[2];return"rgb(".concat(n,", ").concat(i,", ").concat(r,")")},rgb:function(e){return u[c[e%c.length]]}},h=function(e){var t=s(l.rgb(e),3),n=t[0],i=t[1],r=t[2];return{stroke:"rgb(".concat(n,", ").concat(i,", ").concat(r,")"),fill:"rgb(".concat(n,", ").concat(i,", ").concat(r,", 0.1)")}};n(7);function f(e,t,n,i){let r;n=n||0;let o=(i=i||t.length-1)<=2147483647;for(;i-n>1;)r=o?n+i>>1:m((n+i)/2),t[r]<e?n=r:i=r;return e-t[n]<=t[i]-e?n:i}function d(e,t,n,i){const r=t-e,o=x(r||v(t)||1),a=m(o),s=w(10,a)*n,u=0==r?s:0;let c=M(function(e,t){return m(e/t)*t}(e-u,s)),l=M(L(t+u,s));return i&&(0==r?t>0?(c=0,l=2*t):t<0&&(l=0,c=2*e):(l-t<s&&(l+=s),e-c<s&&(c-=s),e>=0&&c<0&&(c=0),t<=0&&l>0&&(l=0))),[c,l]}const p=Math,v=p.abs,m=p.floor,g=p.round,y=p.ceil,b=p.min,k=p.max,w=p.pow,x=p.log10,S=p.PI,C=1/0;function E(e,t){return g(e/t)*t}function A(e,t,n){return b(k(e,t),n)}function T(e){return"function"==typeof e?e:()=>e}function P(e,t){return t}function L(e,t){return y(e/t)*t}function _(e){return g(1e3*e)/1e3}function M(e){return g(1e6*e)/1e6}const j=Array.isArray;function D(e){return"object"==typeof e&&null!==e}function O(e){let t;if(j(e))t=e.map(O);else if(D(e))for(var n in t={},e)t[n]=O(e[n]);else t=e;return t}function R(e){let t=arguments;for(let n=1;n<t.length;n++){let i=t[n];for(let t in i)D(e[t])?R(e[t],O(i[t])):e[t]=O(i[t])}return e}const I="width",N="height",H="top",Y="left",B=requestAnimationFrame,F=document,J=window,U=devicePixelRatio;function W(e,t){null!=t&&e.classList.add(t)}function V(e,t,n){e.style[t]=n+"px"}function q(e,t,n,i){let r=F.createElement(e);return null!=t&&W(r,t),null!=n&&n.insertBefore(r,i),r}function z(e,t){return q("div",e,t)}function G(e,t,n){e.style.transform="translate("+t+"px,"+n+"px)"}const K={passive:!0};function X(e,t,n){t.addEventListener(e,n,K)}function $(e,t,n){t.removeEventListener(e,n,K)}const Q=["January","February","March","April","May","June","July","August","September","October","November","December"],Z=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];function ee(e){return e.slice(0,3)}const te=Z.map(ee),ne=Q.map(ee),ie={MMMM:Q,MMM:ne,WWWW:Z,WWW:te};function re(e){return(e<10?"0":"")+e}const oe={YYYY:e=>e.getFullYear(),YY:e=>(e.getFullYear()+"").slice(2),MMMM:(e,t)=>t.MMMM[e.getMonth()],MMM:(e,t)=>t.MMM[e.getMonth()],MM:e=>re(e.getMonth()+1),M:e=>e.getMonth()+1,DD:e=>re(e.getDate()),D:e=>e.getDate(),WWWW:(e,t)=>t.WWWW[e.getDay()],WWW:(e,t)=>t.WWW[e.getDay()],HH:e=>re(e.getHours()),H:e=>e.getHours(),h:e=>{let t=e.getHours();return 0==t?12:t>12?t-12:t},AA:e=>e.getHours()>=12?"PM":"AM",aa:e=>e.getHours()>=12?"pm":"am",a:e=>e.getHours()>=12?"p":"a",mm:e=>re(e.getMinutes()),m:e=>e.getMinutes(),ss:e=>re(e.getSeconds()),s:e=>e.getSeconds(),fff:e=>{return((t=e.getMilliseconds())<10?"00":t<100?"0":"")+t;var t}};function ae(e,t){t=t||ie;let n,i=[],r=/\{([a-z]+)\}|[^{]+/gi;for(;n=r.exec(e);)i.push("{"==n[0][0]?oe[n[1]]:n[0]);return e=>{let n="";for(let r=0;r<i.length;r++)n+="string"==typeof i[r]?i[r]:i[r](e,t);return n}}function se(e,t,n){let i=[];for(let r=e;r<t;r++)for(let e=0;e<n.length;e++){let t=n[e]*w(10,r);i.push(+t.toFixed(v(r)))}return i}const ue=[1,2,5],ce=se(-12,0,ue),le=se(0,12,ue),he=ce.concat(le);let fe=60,de=fe*fe,pe=24*de,ve=30*pe,me=365*pe;const ge=[5e-4].concat(se(-3,0,ue),[1,5,10,15,30,fe,300,600,900,1800,de,2*de,3*de,4*de,6*de,8*de,12*de,pe,2*pe,3*pe,4*pe,5*pe,6*pe,7*pe,8*pe,9*pe,10*pe,15*pe,ve,2*ve,3*ve,4*ve,6*ve,me,2*me,5*me,10*me,25*me,50*me,100*me]);function ye(e,t){return e.map(e=>[e[0],t(e[1]),e[2],t(e[4]?e[1]+e[3]:e[3])])}const be="{M}/{D}",ke="\n"+be,we="{h}:{mm}{aa}",xe=[[me,"{YYYY}",7,"",1],[28*pe,"{MMM}",7,"\n{YYYY}",1],[pe,be,7,"\n{YYYY}",1],[de,"{h}{aa}",4,ke,1],[fe,we,4,ke,1],[1,":{ss}",2,ke+" "+we,1],[.001,":{ss}.{fff}",2,ke+" "+we,1]];function Se(e,t){return(n,i,r,o)=>{let a=t.find(e=>o>=e[0])||t[t.length-1],s=null,u=null,c=null;return i.map((t,n)=>{let i=e(t),r=i.getFullYear(),o=i.getDate(),l=i.getMinutes(),h=r!=s,f=o!=u,d=l!=c,p=7==a[2]&&h||4==a[2]&&f||2==a[2]&&d?a[3]:a[1];return s=r,u=o,c=l,p(i)})}}function Ce(e,t,n){return new Date(e,t,n)}function Ee(e,t){return t(e)}function Ae(e,t){return(n,i)=>t(e(i))}const Te={show:!0,x:!0,y:!0,lock:!1,points:{show:function(e,t){let n=e.series[t],i=z();i.style.background=n.stroke||"#000";let r=Ye(n.width,1),o=(r-1)/-2;return V(i,I,r),V(i,N,r),V(i,"marginLeft",o),V(i,"marginTop",o),i}},drag:{setScale:!0,x:!0,y:!1,dist:0,uni:null,_x:!1,_y:!1},focus:{prox:-1},locked:!1,left:-10,top:-10,idx:null},Pe={show:!0,stroke:"rgba(0,0,0,0.07)",width:2},Le=R({},Pe,{size:10}),_e='12px -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"',Me="bold "+_e,je={type:"x",show:!0,scale:"x",space:50,gap:5,size:50,labelSize:30,labelFont:Me,side:2,grid:Pe,ticks:Le,font:_e,rotate:0},De={show:!0,scale:"x",min:C,max:-C,idxs:[]};let Oe=new Intl.NumberFormat(navigator.language);function Re(e,t,n,i){return t.map(Oe.format)}function Ie(e,t,n,i,r,o){let a=[];for(let e=t=o?t:+L(t,i).toFixed(12);e<=n;e=+(e+i).toFixed(12))a.push(e);return a}function Ne(e,t){return t}const He={type:"y",show:!0,scale:"y",space:40,gap:5,size:50,labelSize:30,labelFont:Me,side:3,grid:Pe,ticks:Le,font:_e,rotate:0};function Ye(e,t){return _((3+2*(e||1))*t)}const Be={scale:"y",show:!0,band:!1,alpha:1,points:{show:function(e,t){const n=Ye(e.series[t].width,U);let i=e.bbox.width/n/2,r=e.series[0].idxs;return r[1]-r[0]<=i}},values:null,min:C,max:-C,idxs:[],path:null,clip:null},Fe={time:!0,auto:!1,distr:1,min:C,max:-C},Je=R({},Fe,{time:!1,auto:!0}),Ue={};function We(e){let t=[];return{sub(e){t.push(e)},unsub(e){t=t.filter(t=>t!=e)},pub(e,n,i,r,o,a,s){t.length>1&&t.forEach(t=>{t!=n&&t.pub(e,n,i,r,o,a,s)})}}}function Ve(e,t,n,i){return(i?[e[0],e[1]].concat(e.slice(2)):[e[0]].concat(e.slice(1))).map((e,i)=>qe(e,i,t,n))}function qe(e,t,n,i){return R({},0==t||e&&e.side%2==0?n:i,e)}function ze(e,t,n,i){return i+(1-(e-t.min)/(t.max-t.min))*n}function Ge(e,t,n,i){return i+(e-t.min)/(t.max-t.min)*n}function Ke(e,t,n){return[t,n>t?n:n+86400]}function Xe(e,t,n){const i=n-t;if(0==i){const e=x(i||v(n)||1),r=m(e)+1;return[t,L(n,w(10,r))]}return[t,n]}function $e(e,t,n){return d(t,n,.2,!0)}function Qe(e){return 0==e.button}function Ze(e){let t;return[e=e.replace(/\d+/,e=>t=g(e*U)),t]}function et(e,t,n){const i={},r=i.root=z("uplot");if(null!=e.id&&(r.id=e.id),W(r,e.class),e.title){z("title",r).textContent=e.title}const o=q("canvas"),a=i.ctx=o.getContext("2d"),s=z("wrap",r),u=z("under",s);s.appendChild(o);const c=z("over",s);((e=O(e)).plugins||[]).forEach(t=>{t.opts&&(e=t.opts(i,e)||e)});let l=!1;const h=i.series=Ve(e.series||[],De,Be,!1),d=i.axes=Ve(e.axes||[],je,He,!0),p=i.scales=e.scales=e.scales||{},y=R({x:g(He.size/2),y:g(je.size/3)},e.gutters),w=e.tzDate||(e=>new Date(1e3*e)),x=e.fmtDate||ae,D=function(e){return(t,n,i,r,o)=>{let a=[],s=r>=ve&&r<me,u=e(n),c=u/1e3,l=Ce(u.getFullYear(),u.getMonth(),s?1:u.getDate()),h=l/1e3;if(s){let t=r/ve,n=c==h?c:Ce(l.getFullYear(),l.getMonth()+t,1)/1e3,o=new Date(1e3*n),s=o.getFullYear(),u=o.getMonth();for(let r=0;n<=i;r++){let o=Ce(s,u+t*r,1),c=o-e(o/1e3);n=(+o+c)/1e3,n<=i&&a.push(n)}}else{let t=r>=pe?pe:r,s=h+(m(n)-m(c))+L(c-h,t);a.push(s);let u=e(s),l=u.getHours()+u.getMinutes()/fe+u.getSeconds()/de,f=r/de;for(;;){s=_(s+r);let t=m(M(l+f))%24,n=e(s).getHours()-t;if(n>1&&(n=-1),s-=n*de,s>i)break;l=(l+f)%24,_((s-a[a.length-1])/r)*o>=.7&&a.push(s)}}return a}}(w),K=Se(w,ye(xe,x)),Q=Ae(w,Ee("{YYYY}-{MM}-{DD} {h}:{mm}{aa}",x)),Z={};for(let e in p){let t=p[e];null==t.min&&null==t.max||(Z[e]={min:t.min,max:t.max})}const ee=R({show:!0},e.legend).show;let te,ne,ie=[],re=!1;if(ee){te=q("table","legend",r);const e=h[1]?h[1].values:null;if(re=null!=e,re){let t=q("tr","labels",te);for(var oe in q("th",null,t),ne=e(i,1,0),ne)q("th",null,t).textContent=oe}else ne={_:0},W(te,"inline")}const se=i.cursor=R({},Te,e.cursor);se.points.show=T(se.points.show);const ue=i.focus=R({},e.focus||{alpha:.3},se.focus),ce=ue.prox>=0;let be=[null];function ke(e,t){const n=e.scale,r=p[n]=R({},0==t?Fe:Je,p[n]);let o=r.time;r.range=T(r.range||(o?Ke:0==t?Xe:$e)),e.spanGaps=!0===e.spanGaps?P:T(e.spanGaps||[]);let a=e.value;if(e.value=o?"string"==typeof a?Ae(w,Ee(a,x)):a||Q:a||Ne,e.label=e.label||(o?"Time":"Value"),t>0){e.width=null==e.width?1:e.width,e.paths=e.paths||At;let t=Ye(e.width,1);e.points=R({},{size:t,width:k(1,.2*t)},e.points),e.points.show=T(e.points.show),e._paths=null}if(ee&&ie.splice(t,0,function(e,t){if(0==t&&re)return null;let n=[],i=q("tr","series",te,te.childNodes[t]);W(i,e.class),e.show||W(i,"off");let r=q("th",null,i),o=z("ident",r);e.width&&(o.style.borderColor=e.stroke),o.style.backgroundColor=e.fill;let a=z("text",r);for(var s in a.textContent=e.label,t>0&&(X("click",r,t=>{se.locked||Qe(t)&&Ft(h.indexOf(e),{show:!e.show},pn.setSeries)}),ce&&X("mouseenter",r,t=>{se.locked||Ft(h.indexOf(e),{focus:!0},pn.setSeries)})),ne){let e=q("td",null,i);e.textContent="--",n.push(e)}return n}(e,t)),se.show){let n=function(e,t){if(t>0){let n=se.points.show(i,t);if(n)return W(n,"cursor-pt"),W(n,e.class),G(n,-10,-10),c.insertBefore(n,be[t]),n}}(e,t);n&&be.splice(t,0,n)}}i.addSeries=function(e,t){e=qe(e,t=null==t?h.length:t,De,Be),h.splice(t,0,e),ke(h[t],t)},i.delSeries=function(e){h.splice(e,1),ie.splice(e,1)[0][0].parentNode.remove(),be.splice(e,1)[0].remove()},h.forEach(ke);for(let e in p){let t=p[e];null!=t.from&&(p[e]=R({},p[t.from],t))}const we=h[0].scale,Pe=p[we].distr;let Le;d.forEach((function(e,t){if(e.show){let t=e.side%2,n=p[e.scale];null==n&&(e.scale=t?h[1].scale:we,n=p[e.scale]);let i=n.time;e.space=T(e.space),e.rotate=T(e.rotate),e.incrs=T(e.incrs||(2==n.distr?le:i?ge:he)),e.split=T(e.split||(i&&1==n.distr?D:Ie));let r=e.values;e.values=i?j(r)?Se(w,ye(r,x)):r||K:r||Re,e.font=Ze(e.font),e.labelFont=Ze(e.labelFont)}}));let _e=null,Me=null;const Oe=h[0].idxs;let et,tt,nt,it,rt,ot,at,st,ut,ct,lt=null;function ht(e,n){(e=e||[])[0]=e[0]||[],i.data=e,t=e.slice(),lt=t[0],Le=lt.length,2==Pe&&(t[0]=lt.map((e,t)=>t)),Lt(),dn("setData"),!1!==n&&ft()}function ft(){_e=Oe[0]=0,Me=Oe[1]=Le-1;let e=2==Pe?_e:t[0][_e],n=2==Pe?Me:t[0][Me];Bt(we,e,n)}function dt(e,t,n,i){a.strokeStyle=e||"#000",a.lineWidth=t,a.lineJoin="round",a.setLineDash(n||[]),a.fillStyle=i||"#000"}function pt(e,t){i.width=et=nt=e,i.height=tt=it=t,rt=ot=0,function(){let e=!1,t=!1,n=!1,i=!1;d.forEach((r,o)=>{if(r.show){let{side:o,size:a}=r,s=o%2,u=a+(r.labelSize=null!=r.label?r.labelSize||30:0);u>0&&(s?(nt-=u,3==o?(rt+=u,i=!0):n=!0):(it-=u,0==o?(ot+=u,e=!0):t=!0))}}),(e||t)&&(n||(nt-=y.x),i||(nt-=y.x,rt+=y.x));(i||n)&&(t||(it-=y.y),e||(it-=y.y,ot+=y.y))}(),function(){let e=rt+nt,t=ot+it,n=rt,i=ot;function r(r,o){switch(r){case 1:return e+=o,e-o;case 2:return t+=o,t-o;case 3:return n-=o,n+o;case 0:return i-=o,i+o}}d.forEach((e,t)=>{let n=e.side;e._pos=r(n,e.size),null!=e.label&&(e._lpos=r(n,e.labelSize))})}();let n=i.bbox;at=n.left=E(rt*U,.5),st=n.top=E(ot*U,.5),ut=n.width=E(nt*U,.5),ct=n.height=E(it*U,.5),V(u,Y,rt),V(u,H,ot),V(u,I,nt),V(u,N,it),V(c,Y,rt),V(c,H,ot),V(c,I,nt),V(c,N,it),V(s,I,et),V(s,N,tt),o.width=g(et*U),o.height=g(tt*U),tn(),l&&Bt(we,p[we].min,p[we].max),l&&dn("setSize")}function vt(){if(zt)Kt=!0;else{if(Le>0){let e=O(p);for(let t in e){let n=e[t],i=Z[t];null!=i?(R(n,i),t==we&&Lt()):t!=we&&(n.min=C,n.max=-C)}h.forEach((n,r)=>{let o=n.scale,a=e[o];if(0==r){let e=a.range(i,a.min,a.max);a.min=e[0],a.max=e[1],_e=f(a.min,t[0]),Me=f(a.max,t[0]),t[0][_e]<a.min&&_e++,t[0][Me]>a.max&&Me--,n.min=lt[_e],n.max=lt[Me]}else if(n.show&&null==Z[o]){let e=n.min==C?a.auto?function(e,t,n){let i=C,r=-C;for(let o=t;o<=n;o++)null!=e[o]&&(i=b(i,e[o]),r=k(r,e[o]));return[i,r]}(t[r],_e,Me):[0,100]:[n.min,n.max];a.min=b(a.min,n.min=e[0]),a.max=k(a.max,n.max=e[1])}n.idxs[0]=_e,n.idxs[1]=Me});for(let t in e){let n=e[t];if(null==n.from&&n.min!=C&&null==Z[t]){let e=n.range(i,n.min,n.max);n.min=e[0],n.max=e[1]}}for(let t in e){let n=e[t];if(null!=n.from){let t=e[n.from];if(t.min!=C){let e=n.range(i,t.min,t.max);n.min=e[0],n.max=e[1]}}}let n={};for(let t in e){let i=e[t],r=p[t];r.min==i.min&&r.max==i.max||(r.min=i.min,r.max=i.max,n[t]=!0),Z[t]=null}h.forEach(e=>{n[e.scale]&&(e._paths=null)});for(let e in n)dn("setScale",e)}se.show&&Zt()}}i.setData=ht,i.bbox={},i.setSize=function({width:e,height:t}){pt(e,t)};let mt,gt,yt,bt,kt,wt,xt,St=1;function Ct(){h.forEach((e,n)=>{if(n>0&&e.show&&null==e._paths){let r=function(e){let t=A(_e-1,0,Le-1),n=A(Me+1,0,Le-1);for(;null==e[t]&&t>0;)t--;for(;null==e[n]&&n<Le-1;)n++;return[t,n]}(t[n]);e._paths=e.paths(i,n,r[0],r[1])}}),h.forEach((e,n)=>{n>0&&e.show&&(e._paths&&function(e){const t=h[e];if(1==St){const{stroke:e,fill:n,clip:i}=t._paths,r=_(t.width*U),o=r%2/2;dt(t.stroke,r,t.dash,t.fill),a.globalAlpha=t.alpha,a.translate(o,o),a.save();let s=at,u=st,c=ut,l=ct,h=r*U/2;0==t.min&&(l+=h),0==t.max&&(u-=h,l+=h),a.beginPath(),a.rect(s,u,c,l),a.clip(),null!=i&&a.clip(i),t.band?(a.fill(e),r&&a.stroke(e)):(r&&a.stroke(e),null!=t.fill&&a.fill(n)),a.restore(),a.translate(-o,-o),a.globalAlpha=1}t.band&&(St*=-1)}(n),e.points.show(i,n,_e,Me)&&function(e){let n=h[e],i=n.points;const r=_(i.width*U),o=r%2/2,s=i.width>0;let u=(i.size-i.width)/2*U,c=_(2*u);a.translate(o,o),a.save(),a.beginPath(),a.rect(at-c,st-c,ut+2*c,ct+2*c),a.clip(),a.globalAlpha=n.alpha;const l=new Path2D;for(let i=_e;i<=Me;i++)if(null!=t[e][i]){let r=g(Ge(t[0][i],p[we],ut,at)),o=g(ze(t[e][i],p[n.scale],ct,st));l.moveTo(r+u,o),l.arc(r,o,u,0,2*S)}dt(i.stroke||n.stroke||"#000",r,null,i.fill||(s?"#fff":n.stroke||"#000")),a.fill(l),s&&a.stroke(l),a.globalAlpha=1,a.restore(),a.translate(-o,-o)}(n),dn("drawSeries",n))})}function Et(e,t){let n=h[e],r=new Set(n.spanGaps(i,t,e)),o=null;if((t=t.filter(e=>!r.has(e))).length>0){o=new Path2D;let e=at;for(let n=0;n<t.length;n++){let i=t[n];o.rect(e,st,i[0]-e,st+ct),e=i[1]}o.rect(e,st,at+ut-e,st+ct)}return o}function At(e,n,i,r){const o=h[n],a=t[0],s=t[n],u=p[we],c=p[o.scale],l=1==St?{stroke:new Path2D,fill:null,clip:null}:h[n-1]._paths,f=l.stroke,d=_(o.width*U);let v,m,y=C,w=-C,x=[],S=g(Ge(a[1==St?i:r],u,ut,at));o.band&&1==St&&i==_e&&(d&&f.lineTo(-d,g(ze(s[i],c,ct,st))),u.min<a[0]&&x.push([at,S-1]));for(let e=1==St?i:r;e>=i&&e<=r;e+=St){let t=g(Ge(a[e],u,ut,at));if(t==S)null!=s[e]&&(v=g(ze(s[e],c,ct,st)),y=b(v,y),w=k(v,w));else{let n=!1;if(y!=C?(f.lineTo(S,y),f.lineTo(S,w),f.lineTo(S,v),m=S):n=!0,null!=s[e]?(v=g(ze(s[e],c,ct,st)),f.lineTo(t,v),y=w=v,t-S>1&&null==s[e-1]&&(n=!0)):(y=C,w=-C),n){let e=x[x.length-1];e&&e[0]==m?e[1]=t:x.push([m,t])}S=t}}if(o.band){let e,t,n=100*d;-1==St&&i==_e&&(t=at-n,e=i),1==St&&r==Me&&(t=at+ut+n,e=r,u.max>a[Le-1]&&x.push([S,at+ut])),f.lineTo(t,g(ze(s[e],c,ct,st)))}if(1==St&&(l.clip=Et(n,x),null!=o.fill)){let e=l.fill=new Path2D(f),t=g(ze(0,c,ct,st));e.lineTo(at+ut,t),e.lineTo(at,t)}return o.band&&(St*=-1),l}function Tt(e,t,n,r){let o;if(r<=0)o=[0,0];else{let a=e.space(i,t,n,r);o=function(e,t,n,i){let r=n/e;for(var o=0;o<t.length;o++){let e=t[o]*r;if(e>=i)return[t[o],e]}}(n-t,e.incrs(i,t,n,r,a),r,a),o.push(o[1]/a)}return o}function Pt(e,t,n,i,r,o,s,u){let c=o%2/2;a.translate(c,c),dt(s,o,u),a.beginPath();let l,h,f,d,p=i+(0==n||3==n?-r:r);0==t?(h=i,d=p):(l=i,f=p),e.forEach((e,n)=>{0==t?l=f=e:h=d=e,a.moveTo(l,h),a.lineTo(f,d)}),a.stroke(),a.translate(-c,-c)}function Lt(){h.forEach((e,t)=>{t>0&&(e.min=C,e.max=-C,e._paths=null)})}function _t(){zt?Gt=!0:(a.clearRect(0,0,o.width,o.height),dn("drawClear"),d.forEach((e,t)=>{if(!e.show)return;let n=p[e.scale];if(n.min==C)return;let r=e.side,o=r%2,{min:s,max:u}=n,[c,l,h]=Tt(e,s,u,0==o?nt:it),f=2==n.distr,d=e.split(i,s,u,c,h,f),v=0==o?Ge:ze,m=0==o?ut:ct,y=0==o?at:st,b=d.map(e=>g(v(e,n,m,y))),k=g(e.gap*U),w=e.ticks,x=w.show?g(w.size*U):0,E=e.values(i,2==n.distr?d.map(e=>lt[e]):d,l,2==n.distr?lt[d[1]]-lt[d[0]]:c),A=2==r?e.rotate(i,E,l)*-S/180:0,T=g(e._pos*U),P=T+(x+k)*(0==o&&0==r||1==o&&3==r?-1:1),L=0==o?P:0,M=1==o?P:0;a.font=e.font[0],a.fillStyle=e.stroke||"#000",a.textAlign=A>0?Y:A<0?"right":0==o?"center":3==r?"right":Y,a.textBaseline=A||1==o?"middle":2==r?H:"bottom";let j=1.5*e.font[1];if(E.forEach((e,t)=>{0==o?M=b[t]:L=b[t],(""+e).split(/\n/gm).forEach((e,t)=>{A?(a.save(),a.translate(M,L+t*j),a.rotate(A),a.fillText(e,0,0),a.restore()):a.fillText(e,M,L+t*j)})}),e.label){a.save();let t=g(e._lpos*U);1==o?(M=L=0,a.translate(t,g(st+ct/2)),a.rotate((3==r?-S:S)/2)):(M=g(at+ut/2),L=t),a.font=e.labelFont[0],a.textAlign="center",a.textBaseline=2==r?H:"bottom",a.fillText(e.label,M,L),a.restore()}w.show&&Pt(b,o,r,T,x,_(w.width*U),w.stroke);let D=e.grid;D.show&&Pt(b,o,0==o?2:1,0==o?st:at,0==o?ct:ut,_(D.width*U),D.stroke,D.dash)}),dn("drawAxes"),Ct(),mt=!0,dn("draw"))}function Mt(e,n){let i=p[e];if(null==i.from){if(e==we&&(2==i.distr&&(n.min=f(n.min,t[0]),n.max=f(n.max,t[0])),i.time&&d[0].show&&n.max>n.min)){if(Tt(d[0],n.min,n.max,nt)[0]<.001)return}Z[e]=n,mt=!1,vt(),!mt&&_t(),mt=!1}}i.redraw=e=>{!1!==e?Bt(we,p[we].min,p[we].max):_t()},i.setScale=Mt;let jt=!1;const Dt=se.drag;let Ot=Dt.x,Rt=Dt.y;if(se.show){let e="cursor-";se.x&&(wt=se.left,gt=z(e+"x",c)),se.y&&(xt=se.top,yt=z(e+"y",c))}const It=i.select=R({show:!0,left:0,width:0,top:0,height:0},e.select),Nt=It.show?z("select",c):null;function Ht(e,t){if(It.show){for(let t in e)V(Nt,t,It[t]=e[t]);!1!==t&&dn("setSelect")}}function Yt(e,t){let n=h[e],i=ee?ie[e][0].parentNode:null;var r;n.show?i&&(r="off",i.classList.remove(r)):(i&&W(i,"off"),be.length>1&&G(be[e],0,-10))}function Bt(e,t,n){Mt(e,{min:t,max:n})}function Ft(e,t,n){let r=h[e];if(null!=t.focus&&function(e){e!=Wt&&(h.forEach((t,n)=>{!function(e,t){let n=h[e];if(Jt(e,t),n.band){Jt(h[e+1].band?e+1:e-1,t)}}(n,null==e||0==n||n==e?1:ue.alpha)}),Wt=e,_t())}(e),null!=t.show){if(r.show=t.show,Yt(e,t.show),r.band){let n=h[e+1]&&h[e+1].band?e+1:e-1;h[n].show=r.show,Yt(n,t.show)}Bt(we,p[we].min,p[we].max)}dn("setSeries",e,t),n&&mn.pub("setSeries",i,e,t)}function Jt(e,t){h[e].alpha=t,ie&&(ie[e][0].parentNode.style.opacity=t)}i.setSelect=Ht,i.setSeries=Ft;const Ut=Array(h.length);let Wt=null;function Vt(e,t){let n=nt;t!=we&&(n=it,e=n-e);let i=e/n,r=p[t],o=r.max-r.min;return r.min+i*o}function qt(e){return f(Vt(e,we),t[0],_e,Me)}ee&&ce&&X("mouseleave",te,e=>{se.locked||(Ft(null,{focus:!1},pn.setSeries),Zt())}),i.valToIdx=e=>f(e,t[0]),i.posToIdx=qt,i.posToVal=Vt,i.valToPos=(e,t,n)=>t==we?Ge(e,p[t],n?ut:nt,n?at:0):ze(e,p[t],n?ct:it,n?st:0);let zt=!1,Gt=!1,Kt=!1,Xt=!1;function $t(e){zt=!0,e(i),zt=!1,Kt&&vt(),Xt&&Zt(),Gt&&!mt&&_t(),Kt=Xt=Gt=mt=zt}i.batch=$t,i.setCursor=e=>{wt=e.left,xt=e.top,Zt()};let Qt=0;function Zt(e,n){if(zt)return void(Xt=!0);let r;if(Qt=0,se.show&&(se.x&&G(gt,g(wt),0),se.y&&G(yt,0,g(xt))),wt<0||0==Le||_e>Me){r=null;for(let e=0;e<h.length;e++)if(e>0&&(Ut[e]=C,be.length>1&&G(be[e],-10,-10)),ee){if(0==e&&re)continue;for(let t=0;t<ie[e].length;t++)ie[e][t].firstChild.nodeValue="--"}ce&&Ft(null,{focus:!0},pn.setSeries)}else{r=qt(wt);let e=p[we],n=_(Ge(t[0][r],e,nt,0));for(let e=0;e<h.length;e++){let o=h[e];if(e>0&&o.show){let i=t[e][r],a=null==i?-10:_(ze(i,p[o.scale],it,0));Ut[e]=a>0?v(a-xt):C,be.length>1&&G(be[e],n,a)}else Ut[e]=C;if(ee){if(0==e&&re)continue;let n=0==e&&2==Pe?lt:t[e],a=re?o.values(i,e,r):{_:o.value(i,n[r],e,r)},s=0;for(let t in a)ie[e][s++].firstChild.nodeValue=a[t]}}}if(It.show&&jt){let e=v(wt-bt),t=v(xt-kt);if(null!=n){let[e,t]=pn.scales,i=n.cursor.drag;if(Ot=i._x,Rt=i._y,e){let i=p[e],r=n.posToVal(n.select.left,e),o=n.posToVal(n.select.left+n.select.width,e);It.left=Ge(r,i,nt,0),It.width=v(It.left-Ge(o,i,nt,0)),V(Nt,Y,It.left),V(Nt,I,It.width),t||(V(Nt,H,It.top=0),V(Nt,N,It.height=it))}if(t){let i=p[t],r=n.posToVal(n.select.top,t),o=n.posToVal(n.select.top+n.select.height,t);It.top=ze(r,i,it,0),It.height=v(It.top-ze(o,i,it,0)),V(Nt,H,It.top),V(Nt,N,It.height),e||(V(Nt,Y,It.left=0),V(Nt,I,It.width=nt))}}else{Ot=Dt.x&&e>=Dt.dist,Rt=Dt.y&&t>=Dt.dist;let n=Dt.uni;if(null!=n?Ot&&Rt&&(Ot=e>=n,Rt=t>=n,Ot||Rt||(t>e?Rt=!0:Ot=!0)):Dt.x&&Dt.y&&(Ot||Rt)&&(Ot=Rt=!0),Ot){let t=b(bt,wt);V(Nt,Y,It.left=t),V(Nt,I,It.width=e),Rt||(V(Nt,H,It.top=0),V(Nt,N,It.height=it))}if(Rt){let e=b(kt,xt);V(Nt,H,It.top=e),V(Nt,N,It.height=t),Ot||(V(Nt,Y,It.left=0),V(Nt,I,It.width=nt))}Ot||Rt||(V(Nt,N,It.height=0),V(Nt,I,It.width=0))}}if(se.idx=r,se.left=wt,se.top=xt,Dt._x=Ot,Dt._y=Rt,null!=e&&(mn.pub("mousemove",i,wt,xt,nt,it,r),ce)){let e=b.apply(null,Ut),t=null;e<=ue.prox&&Ut.some((n,i)=>{if(n==e)return t=i}),Ft(t,{focus:!0},pn.setSeries)}l&&dn("setCursor")}let en=null;function tn(){en=c.getBoundingClientRect()}function nn(e,t,n,i,r,o,a){se.locked||(rn(e,t,n,i,r,o,a,!1,null!=e),null!=e?0==Qt&&(Qt=B(Zt)):Zt(null,t))}function rn(e,t,n,i,r,o,a,s,u){if(null!=e)n=e.clientX-en.left,i=e.clientY-en.top;else{if(n<0||i<0)return wt=-10,void(xt=-10);let[e,a]=pn.scales;n=null!=e?Ge(t.posToVal(n,e),p[e],nt,0):nt*(n/r),i=null!=a?ze(t.posToVal(i,a),p[a],it,0):it*(i/o)}u&&((n<=1||n>=nt-1)&&(n=E(n,nt)),(i<=1||i>=it-1)&&(i=E(i,it))),s?(bt=n,kt=i):(wt=n,xt=i)}function on(){Ht({width:0,height:0},!1)}function an(e,t,n,r,o,a,s){(null!=t||Qe(e))&&(jt=!0,Ot=Rt=Dt._x=Dt._y=!1,rn(e,t,n,r,o,a,0,!0,!1),null!=e&&(X("mouseup",F,sn),mn.pub("mousedown",i,bt,kt,nt,it,null)))}function sn(e,t,n,r,o,a,s){if(null!=t||Qe(e)){jt=Dt._x=Dt._y=!1,rn(e,t,n,r,o,a,0,!1,!0);let i=It.width>0||It.height>0;i&&Ht(It),Dt.setScale&&i?($t(()=>{if(Ot&&Bt(we,Vt(It.left,we),Vt(It.left+It.width,we)),Rt)for(let e in p){let t=p[e];e!=we&&null==t.from&&Bt(e,Vt(It.top+It.height,e),Vt(It.top,e))}}),on()):se.lock&&(se.locked=!se.locked,se.locked||Zt())}null!=e&&($("mouseup",F,sn),mn.pub("mouseup",i,wt,xt,nt,it,null))}function un(e,t,n,i,r,o,a){if(!se.locked){let e=jt;if(jt){let e=!0,t=!0,n=10;if(Ot&&Rt&&(e=wt<=n||wt>=nt-n,t=xt<=n||xt>=it-n),Ot&&e){let e=wt,t=nt-wt,n=b(e,t);n==e&&(wt=0),n==t&&(wt=nt)}if(Rt&&t){let e=xt,t=it-xt,n=b(e,t);n==e&&(xt=0),n==t&&(xt=it)}Zt(1),jt=!1}wt=-10,xt=-10,Zt(1),e&&(jt=e)}}function cn(e,t,n,r,o,a,s){ft(),on(),null!=e&&mn.pub("dblclick",i,wt,xt,nt,it,null)}const ln={};let hn;ln.mousedown=an,ln.mousemove=nn,ln.mouseup=sn,ln.dblclick=cn,ln.setSeries=(e,t,n,i)=>{Ft(n,i)},se.show&&(X("mousedown",c,an),X("mousemove",c,nn),X("mouseenter",c,tn),X("mouseleave",c,e=>{B(un)}),X("dblclick",c,cn),hn=function(e,t){let n=null;function i(){n=null,e()}return function(){clearTimeout(n),n=setTimeout(i,t)}}(tn,100),X("resize",J,hn),X("scroll",J,hn),i.syncRect=tn);const fn=i.hooks=e.hooks||{};function dn(e,t,n){e in fn&&fn[e].forEach(e=>{e.call(null,i,t,n)})}(e.plugins||[]).forEach(e=>{for(let t in e.hooks)fn[t]=(fn[t]||[]).concat(e.hooks[t])});const pn=R({key:null,setSeries:!1,scales:[we,null]},se.sync),vn=pn.key,mn=null!=vn?Ue[vn]=Ue[vn]||We():We();function gn(){pt(e.width,e.height),dn("init",e,t),ht(t||e.data,!1),Z[we]?Mt(we,Z[we]):ft(),Ht(It,!1),l=!0,dn("ready")}return mn.sub(i),i.pub=function(e,t,n,i,r,o,a){ln[e](null,t,n,i,r,o,a)},i.destroy=function(){mn.unsub(i),$("resize",J,hn),$("scroll",J,hn),r.remove(),dn("destroy")},n?n instanceof HTMLElement?(n.appendChild(r),gn()):n(i,gn):gn(),i}et.assign=R,et.rangeNum=d,et.fmtDate=ae,et.tzDate=function(e,t){let n=new Date(e.toLocaleString("en-US",{timeZone:t}));return n.setMilliseconds(e.getMilliseconds()),n};var tt=et;function nt(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function it(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function rt(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function ot(e,t,n){return t&&rt(e.prototype,t),n&&rt(e,n),e}function at(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function st(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?at(Object(n),!0).forEach((function(t){ut(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):at(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ut(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var ct=function(e){return e.unit?{value:function(t,n){return null==n?"--":n.toFixed(3)+" ".concat(e.unit)}}:{}},lt=function(e){return st({show:!0,size:70,space:15},function(e){return e.unit?{values:function(t,n,i){return n.map((function(t){return+t.toFixed(2)+" ".concat(e.unit)}))}}:{}}(e))},ht=100,ft=300;var dt=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return st({},h(t),{},ct(e),{label:e.label,spanGaps:!0})},pt=function(e){return e.slice(0).map((function(e){return e.data}))};function vt(e,t){var n=e.y,i=e.z;this.datasets[0].data.push(i);var r=this.datasets[1].data[this.datasets[1].data.length-1]||0,o=t.call(this,n,r);this.datasets[1].data.push(o)}function mt(e,t){var n=this,i=e.x,r=e.y,o=e.z,a=this.datasets.findIndex((function(e){var t=e.key;return i===t}));-1===a&&(a=this.datasets.push({key:i,data:Array(this.datasets[0].data.length).fill(null)})-1,this.chart.addSeries(dt({label:i,unit:this.options.unit},a-1),a)),this.datasets=this.datasets.map((function(e,i){return 0===i?e.data.push(o):i===a?e.data.push(t.call(n,r,e.data.reduceRight((function(e,t){return null!=t&&null==e?t:e}),null)||0)):e.data.push(null),e}))}var gt=function(){function e(t,n){it(this,e),this.__callback=this.constructor.__projections()[n.metric],this.chart=t,this.datasets=[{key:"|x|",data:[]}],this.options=n,n.tagged?(this.chart.delSeries(1),this.__handler=mt):(this.datasets.push({key:n.label,data:[]}),this.__handler=vt)}return ot(e,null,[{key:"__projections",value:function(){return{counter:function(e,t){return t+1},last_value:function(e){return e},sum:function(e,t){return t+e}}}},{key:"getConfig",value:function(e){return{class:e.kind,title:e.title,width:e.width,height:e.height,series:[st({},{value:"{YYYY}-{MM}-{DD} {HH}:{mm}:{ss}"}),dt(e,0)],scales:{x:{min:e.now-60,max:e.now},y:{min:0,max:1}},axes:[{space:55,values:[[31536e3,"{YYYY}",7,"{YYYY}"],[2419200,"{MMM}",7,"{MMM}\n{YYYY}"],[86400,"{MM}-{DD}",7,"{MM}-{DD}\n{YYYY}"],[3600,"{HH}:{mm}",4,"{HH}:{mm}\n{YYYY}-{MM}-{DD}"],[60,"{HH}:{mm}",4,"{HH}:{mm}\n{YYYY}-{MM}-{DD}"],[1,"{ss}",2,"{HH}:{mm}:{ss}\n{YYYY}-{MM}-{DD}"]]},lt(e)]}}},{key:"initialData",value:function(){return[[],[]]}}]),ot(e,[{key:"handleMeasurements",value:function(e){var t=this;e.forEach((function(e){return t.__handler.call(t,e,t.__callback)})),this.chart.setData(pt(this.datasets))}}]),e}(),yt=function(){function e(t,n){it(this,e);var i=this.constructor.getConfig(t);i.series[1].values=this.__seriesValues.bind(this),this.datasets=[{key:"|x|",data:[]}],this.chart=new tt(i,this.constructor.initialData(t),n),this.options=t,t.tagged?(this.chart.delSeries(1),this.__handler=this.handleTaggedMeasurement.bind(this)):(this.datasets.push(this.constructor.newDataset(t.label)),this.__handler=this.handleMeasurement.bind(this))}return ot(e,[{key:"handleMeasurements",value:function(e){var t=this;e.forEach((function(e){return t.__handler(e)})),this.chart.setData(pt(this.datasets))}},{key:"handleTaggedMeasurement",value:function(e){var t=this.findOrCreateSeries(e.x);this.handleMeasurement(e,t)}},{key:"handleMeasurement",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,i=e.z;this.datasets=this.datasets.map((function(r,o){return"|x|"===r.key?r.data.push(i):o===n?t.pushToDataset(r,e):t.pushToDataset(r,null),r}))}},{key:"findOrCreateSeries",value:function(e){var t=this.datasets.findIndex((function(t){var n=t.key;return e===n}));if(-1===t){t=this.datasets.push(this.constructor.newDataset(e,this.datasets[0].data.length))-1;var n=st({values:this.__seriesValues.bind(this)},dt({label:e},t-1));this.chart.addSeries(n,t)}return t}},{key:"pushToDataset",value:function(e,t){if(null===t)return e.data.push(null),e.agg.avg.push(null),e.agg.max.push(null),void e.agg.min.push(null);var n=t.y;return e.agg.count++,e.agg.total+=n,e.data.push(n),(null===e.last.min||n<e.last.min)&&(e.last.min=n),e.agg.min.push(e.last.min),(null===e.last.max||n>e.last.max)&&(e.last.max=n),e.agg.max.push(e.last.max),e.agg.avg.push(e.agg.total/e.agg.count),e}},{key:"__seriesValues",value:function(e,t,n){var i=this.datasets[t];if(i&&i.data&&i.data[n]){var r=i.agg,o=r.avg,a=r.max,s=r.min;return{Value:i.data[n].toFixed(3),Min:s[n].toFixed(3),Max:a[n].toFixed(3),Avg:o[n].toFixed(3)}}return{Value:"--",Min:"--",Max:"--",Avg:"--"}}}],[{key:"initialData",value:function(){return[[],[]]}},{key:"getConfig",value:function(e){return{class:e.kind,title:e.title,width:e.width,height:e.height,series:[st({},{value:"{YYYY}-{MM}-{DD} {HH}:{mm}:{ss}"}),dt(e,0)],scales:{x:{min:e.now-60,max:e.now},y:{min:0,max:1}},axes:[{space:55,values:[[31536e3,"{YYYY}",7,"{YYYY}"],[2419200,"{MMM}",7,"{MMM}\n{YYYY}"],[86400,"{MM}-{DD}",7,"{MM}-{DD}\n{YYYY}"],[3600,"{HH}:{mm}",4,"{HH}:{mm}\n{YYYY}-{MM}-{DD}"],[60,"{HH}:{mm}",4,"{HH}:{mm}\n{YYYY}-{MM}-{DD}"],[1,"{ss}",2,"{HH}:{mm}:{ss}\n{YYYY}-{MM}-{DD}"]]},lt(e)]}}},{key:"newDataset",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=t>0?Array(t).fill(null):[];return{key:e,data:nt(n),agg:{avg:nt(n),count:0,max:nt(n),min:nt(n),total:0},last:{max:null,min:null}}}}]),e}(),bt={counter:gt,last_value:gt,sum:gt,summary:yt},kt=function(){function e(t,n){if(it(this,e),!n.metric)throw new TypeError("No metric type was provided");if(n.metric&&!bt[n.metric])throw new TypeError("No metric defined for type ".concat(n.metric));var i=bt[n.metric];i===yt?(this.metric=new yt(n,t),this.uplotChart=this.metric.chart):(this.uplotChart=new tt(i.getConfig(n),i.initialData(n),t),this.metric=new i(this.uplotChart,n));var r=void 0!==n.refreshInterval;this._isBufferingData=r,this._buffer=[],this._timer=r?setInterval(this._flushToChart.bind(this),+n.refreshInterval):null}return ot(e,[{key:"clearTimers",value:function(){clearInterval(this._timer)}},{key:"resize",value:function(e){this.uplotChart.setSize({width:Math.max(e.width,ht),height:ft})}},{key:"pushData",value:function(e){e.length&&(this._isBufferingData?this._pushToBuffer:this._pushToChart).call(this,e)}},{key:"_pushToBuffer",value:function(e){this._buffer=this._buffer.concat(e)}},{key:"_pushToChart",value:function(e){this.metric.handleMeasurements(e)}},{key:"_flushToChart",value:function(){var e=this._flushBuffer();e.length&&this._pushToChart(e)}},{key:"_flushBuffer",value:function(){if(this._buffer&&!this._buffer.length)return[];var e=this._buffer;return this._buffer=[],e.reduce((function(e,t){return e.concat(t)}),[])}}]),e}(),wt={PhxChartComponent:{mounted:function(){var e,t,n,i=this,r=this.el.parentElement.querySelector(".chart"),o=r.getBoundingClientRect(),a=Object.assign({},r.dataset,{tagged:r.dataset.tags&&""!==r.dataset.tags||!1,width:Math.max(o.width,ht),height:ft,now:new Date/1e3,refreshInterval:1e3});this.chart=new kt(r,a),window.addEventListener("resize",(e=function(){var e=r.getBoundingClientRect();i.chart.resize(e)},n=!1,function(){n||(requestAnimationFrame(e),n=!0,setTimeout((function(){n=!1}),t))}))},updated:function(){var e=Array.from(this.el.children||[]).map((function(e){var t=e.dataset;return{x:t.x,y:+t.y,z:+t.z/1e6}}));e.length>0&&this.chart.pushData(e)},destroyed:function(){this.chart.clearTimers()}},PhxRequestLoggerCookie:{updated:function(){var e,t,n={key:(e=this).el.getAttribute("data-cookie-key"),value:e.el.getAttribute("data-cookie-value")};t=n,document.cookie="".concat(t.key,"=; expires=").concat("Thu, 01 Jan 1970 00:00:00 GMT"),function(e){return"true"===e.el.getAttribute("data-cookie-enabled")}(this)&&function(e){document.cookie="".concat(e.key,"=").concat(e.value,";samesite=strict;path=/")}(n)}},PhxRequestLoggerQueryParameter:{mounted:function(){var e=this;this.el.querySelector(".btn-primary").addEventListener("click",(function(t){!function(e){if(navigator.clipboard){var t=e.value;navigator.clipboard.writeText(t)}else e.select(),e.setSelectionRange(0,99999),document.execCommand("copy")}(e.el.querySelector("textarea"));var n=e.el.querySelector(".copy-indicator");n.setAttribute("data-enabled","false"),n.offsetWidth,n.setAttribute("data-enabled","true")}))}},PhxRequestLoggerMessages:{updated:function(){if(this.el.querySelector(".logger-autoscroll-checkbox").checked){var e=this.el.querySelector("#logger-messages");e.scrollTop=e.scrollHeight}}}},xt=document.querySelector("html").getAttribute("phx-socket")||"/live",St=document.querySelector("meta[name='csrf-token']").getAttribute("content"),Ct=new a.LiveSocket(xt,i.Socket,{hooks:wt,params:{_csrf_token:St}});window.addEventListener("phx:page-loading-start",(function(e){return o.a.start()})),window.addEventListener("phx:page-loading-stop",(function(e){return o.a.done()})),Ct.connect(),window.liveSocket=Ct}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,